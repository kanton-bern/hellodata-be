/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.AzureBlobFsConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.CryptFsConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.FsProviders;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.GCSConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.HTTPFsConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.OSFsConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.S3Config;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.SFTPFsConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Storage filesystem details
 */
@JsonPropertyOrder({
  FilesystemConfig.JSON_PROPERTY_PROVIDER,
  FilesystemConfig.JSON_PROPERTY_OSCONFIG,
  FilesystemConfig.JSON_PROPERTY_S3CONFIG,
  FilesystemConfig.JSON_PROPERTY_GCSCONFIG,
  FilesystemConfig.JSON_PROPERTY_AZBLOBCONFIG,
  FilesystemConfig.JSON_PROPERTY_CRYPTCONFIG,
  FilesystemConfig.JSON_PROPERTY_SFTPCONFIG,
  FilesystemConfig.JSON_PROPERTY_HTTPCONFIG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class FilesystemConfig {
  public static final String JSON_PROPERTY_PROVIDER = "provider";
  private FsProviders provider;

  public static final String JSON_PROPERTY_OSCONFIG = "osconfig";
  private OSFsConfig osconfig;

  public static final String JSON_PROPERTY_S3CONFIG = "s3config";
  private S3Config s3config;

  public static final String JSON_PROPERTY_GCSCONFIG = "gcsconfig";
  private GCSConfig gcsconfig;

  public static final String JSON_PROPERTY_AZBLOBCONFIG = "azblobconfig";
  private AzureBlobFsConfig azblobconfig;

  public static final String JSON_PROPERTY_CRYPTCONFIG = "cryptconfig";
  private CryptFsConfig cryptconfig;

  public static final String JSON_PROPERTY_SFTPCONFIG = "sftpconfig";
  private SFTPFsConfig sftpconfig;

  public static final String JSON_PROPERTY_HTTPCONFIG = "httpconfig";
  private HTTPFsConfig httpconfig;

  public FilesystemConfig() {
  }

  public FilesystemConfig provider(FsProviders provider) {
    
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FsProviders getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProvider(FsProviders provider) {
    this.provider = provider;
  }

  public FilesystemConfig osconfig(OSFsConfig osconfig) {
    
    this.osconfig = osconfig;
    return this;
  }

  /**
   * Get osconfig
   * @return osconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OSCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OSFsConfig getOsconfig() {
    return osconfig;
  }


  @JsonProperty(JSON_PROPERTY_OSCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOsconfig(OSFsConfig osconfig) {
    this.osconfig = osconfig;
  }

  public FilesystemConfig s3config(S3Config s3config) {
    
    this.s3config = s3config;
    return this;
  }

  /**
   * Get s3config
   * @return s3config
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_S3CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public S3Config getS3config() {
    return s3config;
  }


  @JsonProperty(JSON_PROPERTY_S3CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setS3config(S3Config s3config) {
    this.s3config = s3config;
  }

  public FilesystemConfig gcsconfig(GCSConfig gcsconfig) {
    
    this.gcsconfig = gcsconfig;
    return this;
  }

  /**
   * Get gcsconfig
   * @return gcsconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GCSCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GCSConfig getGcsconfig() {
    return gcsconfig;
  }


  @JsonProperty(JSON_PROPERTY_GCSCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGcsconfig(GCSConfig gcsconfig) {
    this.gcsconfig = gcsconfig;
  }

  public FilesystemConfig azblobconfig(AzureBlobFsConfig azblobconfig) {
    
    this.azblobconfig = azblobconfig;
    return this;
  }

  /**
   * Get azblobconfig
   * @return azblobconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AZBLOBCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AzureBlobFsConfig getAzblobconfig() {
    return azblobconfig;
  }


  @JsonProperty(JSON_PROPERTY_AZBLOBCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAzblobconfig(AzureBlobFsConfig azblobconfig) {
    this.azblobconfig = azblobconfig;
  }

  public FilesystemConfig cryptconfig(CryptFsConfig cryptconfig) {
    
    this.cryptconfig = cryptconfig;
    return this;
  }

  /**
   * Get cryptconfig
   * @return cryptconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CRYPTCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CryptFsConfig getCryptconfig() {
    return cryptconfig;
  }


  @JsonProperty(JSON_PROPERTY_CRYPTCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCryptconfig(CryptFsConfig cryptconfig) {
    this.cryptconfig = cryptconfig;
  }

  public FilesystemConfig sftpconfig(SFTPFsConfig sftpconfig) {
    
    this.sftpconfig = sftpconfig;
    return this;
  }

  /**
   * Get sftpconfig
   * @return sftpconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SFTPCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SFTPFsConfig getSftpconfig() {
    return sftpconfig;
  }


  @JsonProperty(JSON_PROPERTY_SFTPCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSftpconfig(SFTPFsConfig sftpconfig) {
    this.sftpconfig = sftpconfig;
  }

  public FilesystemConfig httpconfig(HTTPFsConfig httpconfig) {
    
    this.httpconfig = httpconfig;
    return this;
  }

  /**
   * Get httpconfig
   * @return httpconfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTPCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HTTPFsConfig getHttpconfig() {
    return httpconfig;
  }


  @JsonProperty(JSON_PROPERTY_HTTPCONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpconfig(HTTPFsConfig httpconfig) {
    this.httpconfig = httpconfig;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesystemConfig filesystemConfig = (FilesystemConfig) o;
    return Objects.equals(this.provider, filesystemConfig.provider) &&
        Objects.equals(this.osconfig, filesystemConfig.osconfig) &&
        Objects.equals(this.s3config, filesystemConfig.s3config) &&
        Objects.equals(this.gcsconfig, filesystemConfig.gcsconfig) &&
        Objects.equals(this.azblobconfig, filesystemConfig.azblobconfig) &&
        Objects.equals(this.cryptconfig, filesystemConfig.cryptconfig) &&
        Objects.equals(this.sftpconfig, filesystemConfig.sftpconfig) &&
        Objects.equals(this.httpconfig, filesystemConfig.httpconfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provider, osconfig, s3config, gcsconfig, azblobconfig, cryptconfig, sftpconfig, httpconfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesystemConfig {\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    osconfig: ").append(toIndentedString(osconfig)).append("\n");
    sb.append("    s3config: ").append(toIndentedString(s3config)).append("\n");
    sb.append("    gcsconfig: ").append(toIndentedString(gcsconfig)).append("\n");
    sb.append("    azblobconfig: ").append(toIndentedString(azblobconfig)).append("\n");
    sb.append("    cryptconfig: ").append(toIndentedString(cryptconfig)).append("\n");
    sb.append("    sftpconfig: ").append(toIndentedString(sftpconfig)).append("\n");
    sb.append("    httpconfig: ").append(toIndentedString(httpconfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

