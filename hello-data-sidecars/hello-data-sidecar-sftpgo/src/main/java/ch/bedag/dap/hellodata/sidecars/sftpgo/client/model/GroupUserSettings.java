/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.BaseUserFilters;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.FilesystemConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Permission;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GroupUserSettings
 */
@JsonPropertyOrder({
  GroupUserSettings.JSON_PROPERTY_HOME_DIR,
  GroupUserSettings.JSON_PROPERTY_MAX_SESSIONS,
  GroupUserSettings.JSON_PROPERTY_QUOTA_SIZE,
  GroupUserSettings.JSON_PROPERTY_QUOTA_FILES,
  GroupUserSettings.JSON_PROPERTY_PERMISSIONS,
  GroupUserSettings.JSON_PROPERTY_UPLOAD_BANDWIDTH,
  GroupUserSettings.JSON_PROPERTY_DOWNLOAD_BANDWIDTH,
  GroupUserSettings.JSON_PROPERTY_UPLOAD_DATA_TRANSFER,
  GroupUserSettings.JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER,
  GroupUserSettings.JSON_PROPERTY_TOTAL_DATA_TRANSFER,
  GroupUserSettings.JSON_PROPERTY_EXPIRES_IN,
  GroupUserSettings.JSON_PROPERTY_FILTERS,
  GroupUserSettings.JSON_PROPERTY_FILESYSTEM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class GroupUserSettings {
  public static final String JSON_PROPERTY_HOME_DIR = "home_dir";
  private String homeDir;

  public static final String JSON_PROPERTY_MAX_SESSIONS = "max_sessions";
  private Integer maxSessions;

  public static final String JSON_PROPERTY_QUOTA_SIZE = "quota_size";
  private Long quotaSize;

  public static final String JSON_PROPERTY_QUOTA_FILES = "quota_files";
  private Integer quotaFiles;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private Map<String, List<Permission>> permissions = new HashMap<>();

  public static final String JSON_PROPERTY_UPLOAD_BANDWIDTH = "upload_bandwidth";
  private Integer uploadBandwidth;

  public static final String JSON_PROPERTY_DOWNLOAD_BANDWIDTH = "download_bandwidth";
  private Integer downloadBandwidth;

  public static final String JSON_PROPERTY_UPLOAD_DATA_TRANSFER = "upload_data_transfer";
  private Integer uploadDataTransfer;

  public static final String JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER = "download_data_transfer";
  private Integer downloadDataTransfer;

  public static final String JSON_PROPERTY_TOTAL_DATA_TRANSFER = "total_data_transfer";
  private Integer totalDataTransfer;

  public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
  private Integer expiresIn;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private BaseUserFilters filters;

  public static final String JSON_PROPERTY_FILESYSTEM = "filesystem";
  private FilesystemConfig filesystem;

  public GroupUserSettings() {
  }

  public GroupUserSettings homeDir(String homeDir) {
    
    this.homeDir = homeDir;
    return this;
  }

  /**
   * Get homeDir
   * @return homeDir
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOME_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHomeDir() {
    return homeDir;
  }


  @JsonProperty(JSON_PROPERTY_HOME_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHomeDir(String homeDir) {
    this.homeDir = homeDir;
  }

  public GroupUserSettings maxSessions(Integer maxSessions) {
    
    this.maxSessions = maxSessions;
    return this;
  }

  /**
   * Get maxSessions
   * @return maxSessions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxSessions() {
    return maxSessions;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxSessions(Integer maxSessions) {
    this.maxSessions = maxSessions;
  }

  public GroupUserSettings quotaSize(Long quotaSize) {
    
    this.quotaSize = quotaSize;
    return this;
  }

  /**
   * Get quotaSize
   * @return quotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuotaSize() {
    return quotaSize;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaSize(Long quotaSize) {
    this.quotaSize = quotaSize;
  }

  public GroupUserSettings quotaFiles(Integer quotaFiles) {
    
    this.quotaFiles = quotaFiles;
    return this;
  }

  /**
   * Get quotaFiles
   * @return quotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuotaFiles() {
    return quotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaFiles(Integer quotaFiles) {
    this.quotaFiles = quotaFiles;
  }

  public GroupUserSettings permissions(Map<String, List<Permission>> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public GroupUserSettings putPermissionsItem(String key, List<Permission> permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new HashMap<>();
    }
    this.permissions.put(key, permissionsItem);
    return this;
  }

  /**
   * hash map with directory as key and an array of permissions as value. Directories must be absolute paths, permissions for root directory (\&quot;/\&quot;) are required
   * @return permissions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<Permission>> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPermissions(Map<String, List<Permission>> permissions) {
    this.permissions = permissions;
  }

  public GroupUserSettings uploadBandwidth(Integer uploadBandwidth) {
    
    this.uploadBandwidth = uploadBandwidth;
    return this;
  }

  /**
   * Maximum upload bandwidth as KB/s
   * @return uploadBandwidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUploadBandwidth() {
    return uploadBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadBandwidth(Integer uploadBandwidth) {
    this.uploadBandwidth = uploadBandwidth;
  }

  public GroupUserSettings downloadBandwidth(Integer downloadBandwidth) {
    
    this.downloadBandwidth = downloadBandwidth;
    return this;
  }

  /**
   * Maximum download bandwidth as KB/s
   * @return downloadBandwidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadBandwidth() {
    return downloadBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadBandwidth(Integer downloadBandwidth) {
    this.downloadBandwidth = downloadBandwidth;
  }

  public GroupUserSettings uploadDataTransfer(Integer uploadDataTransfer) {
    
    this.uploadDataTransfer = uploadDataTransfer;
    return this;
  }

  /**
   * Maximum data transfer allowed for uploads as MB
   * @return uploadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUploadDataTransfer() {
    return uploadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadDataTransfer(Integer uploadDataTransfer) {
    this.uploadDataTransfer = uploadDataTransfer;
  }

  public GroupUserSettings downloadDataTransfer(Integer downloadDataTransfer) {
    
    this.downloadDataTransfer = downloadDataTransfer;
    return this;
  }

  /**
   * Maximum data transfer allowed for downloads as MB
   * @return downloadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadDataTransfer() {
    return downloadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadDataTransfer(Integer downloadDataTransfer) {
    this.downloadDataTransfer = downloadDataTransfer;
  }

  public GroupUserSettings totalDataTransfer(Integer totalDataTransfer) {
    
    this.totalDataTransfer = totalDataTransfer;
    return this;
  }

  /**
   * Maximum total data transfer as MB
   * @return totalDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalDataTransfer() {
    return totalDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalDataTransfer(Integer totalDataTransfer) {
    this.totalDataTransfer = totalDataTransfer;
  }

  public GroupUserSettings expiresIn(Integer expiresIn) {
    
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * Account expiration in number of days from creation. 0 means no expiration
   * @return expiresIn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getExpiresIn() {
    return expiresIn;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresIn(Integer expiresIn) {
    this.expiresIn = expiresIn;
  }

  public GroupUserSettings filters(BaseUserFilters filters) {
    
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BaseUserFilters getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(BaseUserFilters filters) {
    this.filters = filters;
  }

  public GroupUserSettings filesystem(FilesystemConfig filesystem) {
    
    this.filesystem = filesystem;
    return this;
  }

  /**
   * Get filesystem
   * @return filesystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilesystemConfig getFilesystem() {
    return filesystem;
  }


  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesystem(FilesystemConfig filesystem) {
    this.filesystem = filesystem;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupUserSettings groupUserSettings = (GroupUserSettings) o;
    return Objects.equals(this.homeDir, groupUserSettings.homeDir) &&
        Objects.equals(this.maxSessions, groupUserSettings.maxSessions) &&
        Objects.equals(this.quotaSize, groupUserSettings.quotaSize) &&
        Objects.equals(this.quotaFiles, groupUserSettings.quotaFiles) &&
        Objects.equals(this.permissions, groupUserSettings.permissions) &&
        Objects.equals(this.uploadBandwidth, groupUserSettings.uploadBandwidth) &&
        Objects.equals(this.downloadBandwidth, groupUserSettings.downloadBandwidth) &&
        Objects.equals(this.uploadDataTransfer, groupUserSettings.uploadDataTransfer) &&
        Objects.equals(this.downloadDataTransfer, groupUserSettings.downloadDataTransfer) &&
        Objects.equals(this.totalDataTransfer, groupUserSettings.totalDataTransfer) &&
        Objects.equals(this.expiresIn, groupUserSettings.expiresIn) &&
        Objects.equals(this.filters, groupUserSettings.filters) &&
        Objects.equals(this.filesystem, groupUserSettings.filesystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(homeDir, maxSessions, quotaSize, quotaFiles, permissions, uploadBandwidth, downloadBandwidth, uploadDataTransfer, downloadDataTransfer, totalDataTransfer, expiresIn, filters, filesystem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupUserSettings {\n");
    sb.append("    homeDir: ").append(toIndentedString(homeDir)).append("\n");
    sb.append("    maxSessions: ").append(toIndentedString(maxSessions)).append("\n");
    sb.append("    quotaSize: ").append(toIndentedString(quotaSize)).append("\n");
    sb.append("    quotaFiles: ").append(toIndentedString(quotaFiles)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    uploadBandwidth: ").append(toIndentedString(uploadBandwidth)).append("\n");
    sb.append("    downloadBandwidth: ").append(toIndentedString(downloadBandwidth)).append("\n");
    sb.append("    uploadDataTransfer: ").append(toIndentedString(uploadDataTransfer)).append("\n");
    sb.append("    downloadDataTransfer: ").append(toIndentedString(downloadDataTransfer)).append("\n");
    sb.append("    totalDataTransfer: ").append(toIndentedString(totalDataTransfer)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filesystem: ").append(toIndentedString(filesystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

