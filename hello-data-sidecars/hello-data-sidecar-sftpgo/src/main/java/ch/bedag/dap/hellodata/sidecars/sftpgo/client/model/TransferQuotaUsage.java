/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransferQuotaUsage
 */
@JsonPropertyOrder({
  TransferQuotaUsage.JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER,
  TransferQuotaUsage.JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class TransferQuotaUsage {
  public static final String JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER = "used_upload_data_transfer";
  private Long usedUploadDataTransfer;

  public static final String JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER = "used_download_data_transfer";
  private Long usedDownloadDataTransfer;

  public TransferQuotaUsage() {
  }

  public TransferQuotaUsage usedUploadDataTransfer(Long usedUploadDataTransfer) {
    
    this.usedUploadDataTransfer = usedUploadDataTransfer;
    return this;
  }

  /**
   * The value must be specified as bytes
   * @return usedUploadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedUploadDataTransfer() {
    return usedUploadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedUploadDataTransfer(Long usedUploadDataTransfer) {
    this.usedUploadDataTransfer = usedUploadDataTransfer;
  }

  public TransferQuotaUsage usedDownloadDataTransfer(Long usedDownloadDataTransfer) {
    
    this.usedDownloadDataTransfer = usedDownloadDataTransfer;
    return this;
  }

  /**
   * The value must be specified as bytes
   * @return usedDownloadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedDownloadDataTransfer() {
    return usedDownloadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedDownloadDataTransfer(Long usedDownloadDataTransfer) {
    this.usedDownloadDataTransfer = usedDownloadDataTransfer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransferQuotaUsage transferQuotaUsage = (TransferQuotaUsage) o;
    return Objects.equals(this.usedUploadDataTransfer, transferQuotaUsage.usedUploadDataTransfer) &&
        Objects.equals(this.usedDownloadDataTransfer, transferQuotaUsage.usedDownloadDataTransfer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(usedUploadDataTransfer, usedDownloadDataTransfer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransferQuotaUsage {\n");
    sb.append("    usedUploadDataTransfer: ").append(toIndentedString(usedUploadDataTransfer)).append("\n");
    sb.append("    usedDownloadDataTransfer: ").append(toIndentedString(usedDownloadDataTransfer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

