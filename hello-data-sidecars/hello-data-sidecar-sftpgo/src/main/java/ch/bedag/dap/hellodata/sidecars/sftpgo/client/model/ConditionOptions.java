/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.ConditionPattern;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ConditionOptions
 */
@JsonPropertyOrder({
  ConditionOptions.JSON_PROPERTY_NAMES,
  ConditionOptions.JSON_PROPERTY_GROUP_NAMES,
  ConditionOptions.JSON_PROPERTY_ROLE_NAMES,
  ConditionOptions.JSON_PROPERTY_FS_PATHS,
  ConditionOptions.JSON_PROPERTY_PROTOCOLS,
  ConditionOptions.JSON_PROPERTY_PROVIDER_OBJECTS,
  ConditionOptions.JSON_PROPERTY_MIN_SIZE,
  ConditionOptions.JSON_PROPERTY_MAX_SIZE,
  ConditionOptions.JSON_PROPERTY_CONCURRENT_EXECUTION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class ConditionOptions {
  public static final String JSON_PROPERTY_NAMES = "names";
  private List<ConditionPattern> names = new ArrayList<>();

  public static final String JSON_PROPERTY_GROUP_NAMES = "group_names";
  private List<ConditionPattern> groupNames = new ArrayList<>();

  public static final String JSON_PROPERTY_ROLE_NAMES = "role_names";
  private List<ConditionPattern> roleNames = new ArrayList<>();

  public static final String JSON_PROPERTY_FS_PATHS = "fs_paths";
  private List<ConditionPattern> fsPaths = new ArrayList<>();

  /**
   * Gets or Sets protocols
   */
  public enum ProtocolsEnum {
    SFTP("SFTP"),
    
    SCP("SCP"),
    
    SSH("SSH"),
    
    FTP("FTP"),
    
    DAV("DAV"),
    
    HTTP("HTTP"),
    
    HTTP_SHARE("HTTPShare"),
    
    OIDC("OIDC");

    private String value;

    ProtocolsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProtocolsEnum fromValue(String value) {
      for (ProtocolsEnum b : ProtocolsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROTOCOLS = "protocols";
  private List<ProtocolsEnum> protocols = new ArrayList<>();

  /**
   * Gets or Sets providerObjects
   */
  public enum ProviderObjectsEnum {
    USER("user"),
    
    GROUP("group"),
    
    ADMIN("admin"),
    
    API_KEY("api_key"),
    
    SHARE("share"),
    
    EVENT_ACTION("event_action"),
    
    EVENT_RULE("event_rule");

    private String value;

    ProviderObjectsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProviderObjectsEnum fromValue(String value) {
      for (ProviderObjectsEnum b : ProviderObjectsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROVIDER_OBJECTS = "provider_objects";
  private List<ProviderObjectsEnum> providerObjects = new ArrayList<>();

  public static final String JSON_PROPERTY_MIN_SIZE = "min_size";
  private Long minSize;

  public static final String JSON_PROPERTY_MAX_SIZE = "max_size";
  private Long maxSize;

  public static final String JSON_PROPERTY_CONCURRENT_EXECUTION = "concurrent_execution";
  private Boolean concurrentExecution;

  public ConditionOptions() {
  }

  public ConditionOptions names(List<ConditionPattern> names) {
    
    this.names = names;
    return this;
  }

  public ConditionOptions addNamesItem(ConditionPattern namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

  /**
   * Get names
   * @return names
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConditionPattern> getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNames(List<ConditionPattern> names) {
    this.names = names;
  }

  public ConditionOptions groupNames(List<ConditionPattern> groupNames) {
    
    this.groupNames = groupNames;
    return this;
  }

  public ConditionOptions addGroupNamesItem(ConditionPattern groupNamesItem) {
    if (this.groupNames == null) {
      this.groupNames = new ArrayList<>();
    }
    this.groupNames.add(groupNamesItem);
    return this;
  }

  /**
   * Get groupNames
   * @return groupNames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUP_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConditionPattern> getGroupNames() {
    return groupNames;
  }


  @JsonProperty(JSON_PROPERTY_GROUP_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroupNames(List<ConditionPattern> groupNames) {
    this.groupNames = groupNames;
  }

  public ConditionOptions roleNames(List<ConditionPattern> roleNames) {
    
    this.roleNames = roleNames;
    return this;
  }

  public ConditionOptions addRoleNamesItem(ConditionPattern roleNamesItem) {
    if (this.roleNames == null) {
      this.roleNames = new ArrayList<>();
    }
    this.roleNames.add(roleNamesItem);
    return this;
  }

  /**
   * Get roleNames
   * @return roleNames
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConditionPattern> getRoleNames() {
    return roleNames;
  }


  @JsonProperty(JSON_PROPERTY_ROLE_NAMES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoleNames(List<ConditionPattern> roleNames) {
    this.roleNames = roleNames;
  }

  public ConditionOptions fsPaths(List<ConditionPattern> fsPaths) {
    
    this.fsPaths = fsPaths;
    return this;
  }

  public ConditionOptions addFsPathsItem(ConditionPattern fsPathsItem) {
    if (this.fsPaths == null) {
      this.fsPaths = new ArrayList<>();
    }
    this.fsPaths.add(fsPathsItem);
    return this;
  }

  /**
   * Get fsPaths
   * @return fsPaths
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FS_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ConditionPattern> getFsPaths() {
    return fsPaths;
  }


  @JsonProperty(JSON_PROPERTY_FS_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsPaths(List<ConditionPattern> fsPaths) {
    this.fsPaths = fsPaths;
  }

  public ConditionOptions protocols(List<ProtocolsEnum> protocols) {
    
    this.protocols = protocols;
    return this;
  }

  public ConditionOptions addProtocolsItem(ProtocolsEnum protocolsItem) {
    if (this.protocols == null) {
      this.protocols = new ArrayList<>();
    }
    this.protocols.add(protocolsItem);
    return this;
  }

  /**
   * Get protocols
   * @return protocols
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROTOCOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProtocolsEnum> getProtocols() {
    return protocols;
  }


  @JsonProperty(JSON_PROPERTY_PROTOCOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProtocols(List<ProtocolsEnum> protocols) {
    this.protocols = protocols;
  }

  public ConditionOptions providerObjects(List<ProviderObjectsEnum> providerObjects) {
    
    this.providerObjects = providerObjects;
    return this;
  }

  public ConditionOptions addProviderObjectsItem(ProviderObjectsEnum providerObjectsItem) {
    if (this.providerObjects == null) {
      this.providerObjects = new ArrayList<>();
    }
    this.providerObjects.add(providerObjectsItem);
    return this;
  }

  /**
   * Get providerObjects
   * @return providerObjects
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVIDER_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProviderObjectsEnum> getProviderObjects() {
    return providerObjects;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_OBJECTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderObjects(List<ProviderObjectsEnum> providerObjects) {
    this.providerObjects = providerObjects;
  }

  public ConditionOptions minSize(Long minSize) {
    
    this.minSize = minSize;
    return this;
  }

  /**
   * Get minSize
   * @return minSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMinSize() {
    return minSize;
  }


  @JsonProperty(JSON_PROPERTY_MIN_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinSize(Long minSize) {
    this.minSize = minSize;
  }

  public ConditionOptions maxSize(Long maxSize) {
    
    this.maxSize = maxSize;
    return this;
  }

  /**
   * Get maxSize
   * @return maxSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getMaxSize() {
    return maxSize;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxSize(Long maxSize) {
    this.maxSize = maxSize;
  }

  public ConditionOptions concurrentExecution(Boolean concurrentExecution) {
    
    this.concurrentExecution = concurrentExecution;
    return this;
  }

  /**
   * allow concurrent execution from multiple nodes
   * @return concurrentExecution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCURRENT_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConcurrentExecution() {
    return concurrentExecution;
  }


  @JsonProperty(JSON_PROPERTY_CONCURRENT_EXECUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcurrentExecution(Boolean concurrentExecution) {
    this.concurrentExecution = concurrentExecution;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionOptions conditionOptions = (ConditionOptions) o;
    return Objects.equals(this.names, conditionOptions.names) &&
        Objects.equals(this.groupNames, conditionOptions.groupNames) &&
        Objects.equals(this.roleNames, conditionOptions.roleNames) &&
        Objects.equals(this.fsPaths, conditionOptions.fsPaths) &&
        Objects.equals(this.protocols, conditionOptions.protocols) &&
        Objects.equals(this.providerObjects, conditionOptions.providerObjects) &&
        Objects.equals(this.minSize, conditionOptions.minSize) &&
        Objects.equals(this.maxSize, conditionOptions.maxSize) &&
        Objects.equals(this.concurrentExecution, conditionOptions.concurrentExecution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(names, groupNames, roleNames, fsPaths, protocols, providerObjects, minSize, maxSize, concurrentExecution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionOptions {\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    groupNames: ").append(toIndentedString(groupNames)).append("\n");
    sb.append("    roleNames: ").append(toIndentedString(roleNames)).append("\n");
    sb.append("    fsPaths: ").append(toIndentedString(fsPaths)).append("\n");
    sb.append("    protocols: ").append(toIndentedString(protocols)).append("\n");
    sb.append("    providerObjects: ").append(toIndentedString(providerObjects)).append("\n");
    sb.append("    minSize: ").append(toIndentedString(minSize)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    concurrentExecution: ").append(toIndentedString(concurrentExecution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

