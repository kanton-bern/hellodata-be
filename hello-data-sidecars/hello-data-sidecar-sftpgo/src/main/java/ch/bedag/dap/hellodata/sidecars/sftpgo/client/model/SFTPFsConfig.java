/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Secret;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SFTPFsConfig
 */
@JsonPropertyOrder({
  SFTPFsConfig.JSON_PROPERTY_ENDPOINT,
  SFTPFsConfig.JSON_PROPERTY_USERNAME,
  SFTPFsConfig.JSON_PROPERTY_PASSWORD,
  SFTPFsConfig.JSON_PROPERTY_PRIVATE_KEY,
  SFTPFsConfig.JSON_PROPERTY_KEY_PASSPHRASE,
  SFTPFsConfig.JSON_PROPERTY_FINGERPRINTS,
  SFTPFsConfig.JSON_PROPERTY_PREFIX,
  SFTPFsConfig.JSON_PROPERTY_DISABLE_CONCURRENT_READS,
  SFTPFsConfig.JSON_PROPERTY_BUFFER_SIZE,
  SFTPFsConfig.JSON_PROPERTY_EQUALITY_CHECK_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class SFTPFsConfig {
  public static final String JSON_PROPERTY_ENDPOINT = "endpoint";
  private String endpoint;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private Secret password;

  public static final String JSON_PROPERTY_PRIVATE_KEY = "private_key";
  private Secret privateKey;

  public static final String JSON_PROPERTY_KEY_PASSPHRASE = "key_passphrase";
  private Secret keyPassphrase;

  public static final String JSON_PROPERTY_FINGERPRINTS = "fingerprints";
  private List<String> fingerprints = new ArrayList<>();

  public static final String JSON_PROPERTY_PREFIX = "prefix";
  private String prefix;

  public static final String JSON_PROPERTY_DISABLE_CONCURRENT_READS = "disable_concurrent_reads";
  private Boolean disableConcurrentReads;

  public static final String JSON_PROPERTY_BUFFER_SIZE = "buffer_size";
  private Integer bufferSize;

  /**
   * Defines how to check if this config points to the same server as another config. If different configs point to the same server the renaming between the fs configs is allowed:  * &#x60;0&#x60; username and endpoint must match. This is the default  * &#x60;1&#x60; only the endpoint must match 
   */
  public enum EqualityCheckModeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    EqualityCheckModeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EqualityCheckModeEnum fromValue(Integer value) {
      for (EqualityCheckModeEnum b : EqualityCheckModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EQUALITY_CHECK_MODE = "equality_check_mode";
  private EqualityCheckModeEnum equalityCheckMode;

  public SFTPFsConfig() {
  }

  public SFTPFsConfig endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

  /**
   * remote SFTP endpoint as host:port
   * @return endpoint
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndpoint() {
    return endpoint;
  }


  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public SFTPFsConfig username(String username) {
    
    this.username = username;
    return this;
  }

  /**
   * you can specify a password or private key or both. In the latter case the private key will be tried first.
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }

  public SFTPFsConfig password(Secret password) {
    
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(Secret password) {
    this.password = password;
  }

  public SFTPFsConfig privateKey(Secret privateKey) {
    
    this.privateKey = privateKey;
    return this;
  }

  /**
   * Get privateKey
   * @return privateKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIVATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getPrivateKey() {
    return privateKey;
  }


  @JsonProperty(JSON_PROPERTY_PRIVATE_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivateKey(Secret privateKey) {
    this.privateKey = privateKey;
  }

  public SFTPFsConfig keyPassphrase(Secret keyPassphrase) {
    
    this.keyPassphrase = keyPassphrase;
    return this;
  }

  /**
   * Get keyPassphrase
   * @return keyPassphrase
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY_PASSPHRASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getKeyPassphrase() {
    return keyPassphrase;
  }


  @JsonProperty(JSON_PROPERTY_KEY_PASSPHRASE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyPassphrase(Secret keyPassphrase) {
    this.keyPassphrase = keyPassphrase;
  }

  public SFTPFsConfig fingerprints(List<String> fingerprints) {
    
    this.fingerprints = fingerprints;
    return this;
  }

  public SFTPFsConfig addFingerprintsItem(String fingerprintsItem) {
    if (this.fingerprints == null) {
      this.fingerprints = new ArrayList<>();
    }
    this.fingerprints.add(fingerprintsItem);
    return this;
  }

  /**
   * SHA256 fingerprints to use for host key verification. If you don&#39;t provide any fingerprint the remote host key will not be verified, this is a security risk
   * @return fingerprints
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFingerprints() {
    return fingerprints;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprints(List<String> fingerprints) {
    this.fingerprints = fingerprints;
  }

  public SFTPFsConfig prefix(String prefix) {
    
    this.prefix = prefix;
    return this;
  }

  /**
   * Specifying a prefix you can restrict all operations to a given path within the remote SFTP server.
   * @return prefix
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrefix() {
    return prefix;
  }


  @JsonProperty(JSON_PROPERTY_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }

  public SFTPFsConfig disableConcurrentReads(Boolean disableConcurrentReads) {
    
    this.disableConcurrentReads = disableConcurrentReads;
    return this;
  }

  /**
   * Concurrent reads are safe to use and disabling them will degrade performance. Some servers automatically delete files once they are downloaded. Using concurrent reads is problematic with such servers.
   * @return disableConcurrentReads
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISABLE_CONCURRENT_READS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDisableConcurrentReads() {
    return disableConcurrentReads;
  }


  @JsonProperty(JSON_PROPERTY_DISABLE_CONCURRENT_READS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisableConcurrentReads(Boolean disableConcurrentReads) {
    this.disableConcurrentReads = disableConcurrentReads;
  }

  public SFTPFsConfig bufferSize(Integer bufferSize) {
    
    this.bufferSize = bufferSize;
    return this;
  }

  /**
   * The size of the buffer (in MB) to use for transfers. By enabling buffering, the reads and writes, from/to the remote SFTP server, are split in multiple concurrent requests and this allows data to be transferred at a faster rate, over high latency networks, by overlapping round-trip times. With buffering enabled, resuming uploads is not supported and a file cannot be opened for both reading and writing at the same time. 0 means disabled.
   * minimum: 0
   * maximum: 16
   * @return bufferSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBufferSize() {
    return bufferSize;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBufferSize(Integer bufferSize) {
    this.bufferSize = bufferSize;
  }

  public SFTPFsConfig equalityCheckMode(EqualityCheckModeEnum equalityCheckMode) {
    
    this.equalityCheckMode = equalityCheckMode;
    return this;
  }

  /**
   * Defines how to check if this config points to the same server as another config. If different configs point to the same server the renaming between the fs configs is allowed:  * &#x60;0&#x60; username and endpoint must match. This is the default  * &#x60;1&#x60; only the endpoint must match 
   * @return equalityCheckMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EQUALITY_CHECK_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EqualityCheckModeEnum getEqualityCheckMode() {
    return equalityCheckMode;
  }


  @JsonProperty(JSON_PROPERTY_EQUALITY_CHECK_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEqualityCheckMode(EqualityCheckModeEnum equalityCheckMode) {
    this.equalityCheckMode = equalityCheckMode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SFTPFsConfig sfTPFsConfig = (SFTPFsConfig) o;
    return Objects.equals(this.endpoint, sfTPFsConfig.endpoint) &&
        Objects.equals(this.username, sfTPFsConfig.username) &&
        Objects.equals(this.password, sfTPFsConfig.password) &&
        Objects.equals(this.privateKey, sfTPFsConfig.privateKey) &&
        Objects.equals(this.keyPassphrase, sfTPFsConfig.keyPassphrase) &&
        Objects.equals(this.fingerprints, sfTPFsConfig.fingerprints) &&
        Objects.equals(this.prefix, sfTPFsConfig.prefix) &&
        Objects.equals(this.disableConcurrentReads, sfTPFsConfig.disableConcurrentReads) &&
        Objects.equals(this.bufferSize, sfTPFsConfig.bufferSize) &&
        Objects.equals(this.equalityCheckMode, sfTPFsConfig.equalityCheckMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, username, password, privateKey, keyPassphrase, fingerprints, prefix, disableConcurrentReads, bufferSize, equalityCheckMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SFTPFsConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privateKey: ").append(toIndentedString(privateKey)).append("\n");
    sb.append("    keyPassphrase: ").append(toIndentedString(keyPassphrase)).append("\n");
    sb.append("    fingerprints: ").append(toIndentedString(fingerprints)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    disableConcurrentReads: ").append(toIndentedString(disableConcurrentReads)).append("\n");
    sb.append("    bufferSize: ").append(toIndentedString(bufferSize)).append("\n");
    sb.append("    equalityCheckMode: ").append(toIndentedString(equalityCheckMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

