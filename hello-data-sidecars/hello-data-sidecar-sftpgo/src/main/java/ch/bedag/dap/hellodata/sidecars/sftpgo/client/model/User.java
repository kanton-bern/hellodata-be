/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.FilesystemConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.GroupMapping;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Permission;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.UserFilters;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.VirtualFolder;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * User
 */
@JsonPropertyOrder({
  User.JSON_PROPERTY_ID,
  User.JSON_PROPERTY_STATUS,
  User.JSON_PROPERTY_USERNAME,
  User.JSON_PROPERTY_EMAIL,
  User.JSON_PROPERTY_DESCRIPTION,
  User.JSON_PROPERTY_EXPIRATION_DATE,
  User.JSON_PROPERTY_PASSWORD,
  User.JSON_PROPERTY_PUBLIC_KEYS,
  User.JSON_PROPERTY_HAS_PASSWORD,
  User.JSON_PROPERTY_HOME_DIR,
  User.JSON_PROPERTY_VIRTUAL_FOLDERS,
  User.JSON_PROPERTY_UID,
  User.JSON_PROPERTY_GID,
  User.JSON_PROPERTY_MAX_SESSIONS,
  User.JSON_PROPERTY_QUOTA_SIZE,
  User.JSON_PROPERTY_QUOTA_FILES,
  User.JSON_PROPERTY_PERMISSIONS,
  User.JSON_PROPERTY_USED_QUOTA_SIZE,
  User.JSON_PROPERTY_USED_QUOTA_FILES,
  User.JSON_PROPERTY_LAST_QUOTA_UPDATE,
  User.JSON_PROPERTY_UPLOAD_BANDWIDTH,
  User.JSON_PROPERTY_DOWNLOAD_BANDWIDTH,
  User.JSON_PROPERTY_UPLOAD_DATA_TRANSFER,
  User.JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER,
  User.JSON_PROPERTY_TOTAL_DATA_TRANSFER,
  User.JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER,
  User.JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER,
  User.JSON_PROPERTY_CREATED_AT,
  User.JSON_PROPERTY_UPDATED_AT,
  User.JSON_PROPERTY_LAST_LOGIN,
  User.JSON_PROPERTY_FIRST_DOWNLOAD,
  User.JSON_PROPERTY_FIRST_UPLOAD,
  User.JSON_PROPERTY_LAST_PASSWORD_CHANGE,
  User.JSON_PROPERTY_FILTERS,
  User.JSON_PROPERTY_FILESYSTEM,
  User.JSON_PROPERTY_ADDITIONAL_INFO,
  User.JSON_PROPERTY_GROUPS,
  User.JSON_PROPERTY_OIDC_CUSTOM_FIELDS,
  User.JSON_PROPERTY_ROLE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class User {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  /**
   * status:   * &#x60;0&#x60; user is disabled, login is not allowed   * &#x60;1&#x60; user is enabled 
   */
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_EXPIRATION_DATE = "expiration_date";
  private Long expirationDate;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_PUBLIC_KEYS = "public_keys";
  private List<String> publicKeys = new ArrayList<>();

  public static final String JSON_PROPERTY_HAS_PASSWORD = "has_password";
  private Boolean hasPassword;

  public static final String JSON_PROPERTY_HOME_DIR = "home_dir";
  private String homeDir;

  public static final String JSON_PROPERTY_VIRTUAL_FOLDERS = "virtual_folders";
  private List<VirtualFolder> virtualFolders = new ArrayList<>();

  public static final String JSON_PROPERTY_UID = "uid";
  private Integer uid;

  public static final String JSON_PROPERTY_GID = "gid";
  private Integer gid;

  public static final String JSON_PROPERTY_MAX_SESSIONS = "max_sessions";
  private Integer maxSessions;

  public static final String JSON_PROPERTY_QUOTA_SIZE = "quota_size";
  private Long quotaSize;

  public static final String JSON_PROPERTY_QUOTA_FILES = "quota_files";
  private Integer quotaFiles;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private Map<String, List<Permission>> permissions = new HashMap<>();

  public static final String JSON_PROPERTY_USED_QUOTA_SIZE = "used_quota_size";
  private Long usedQuotaSize;

  public static final String JSON_PROPERTY_USED_QUOTA_FILES = "used_quota_files";
  private Integer usedQuotaFiles;

  public static final String JSON_PROPERTY_LAST_QUOTA_UPDATE = "last_quota_update";
  private Long lastQuotaUpdate;

  public static final String JSON_PROPERTY_UPLOAD_BANDWIDTH = "upload_bandwidth";
  private Integer uploadBandwidth;

  public static final String JSON_PROPERTY_DOWNLOAD_BANDWIDTH = "download_bandwidth";
  private Integer downloadBandwidth;

  public static final String JSON_PROPERTY_UPLOAD_DATA_TRANSFER = "upload_data_transfer";
  private Integer uploadDataTransfer;

  public static final String JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER = "download_data_transfer";
  private Integer downloadDataTransfer;

  public static final String JSON_PROPERTY_TOTAL_DATA_TRANSFER = "total_data_transfer";
  private Integer totalDataTransfer;

  public static final String JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER = "used_upload_data_transfer";
  private Integer usedUploadDataTransfer;

  public static final String JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER = "used_download_data_transfer";
  private Integer usedDownloadDataTransfer;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Long createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private Long updatedAt;

  public static final String JSON_PROPERTY_LAST_LOGIN = "last_login";
  private Long lastLogin;

  public static final String JSON_PROPERTY_FIRST_DOWNLOAD = "first_download";
  private Long firstDownload;

  public static final String JSON_PROPERTY_FIRST_UPLOAD = "first_upload";
  private Long firstUpload;

  public static final String JSON_PROPERTY_LAST_PASSWORD_CHANGE = "last_password_change";
  private Long lastPasswordChange;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private UserFilters filters;

  public static final String JSON_PROPERTY_FILESYSTEM = "filesystem";
  private FilesystemConfig filesystem;

  public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additional_info";
  private String additionalInfo;

  public static final String JSON_PROPERTY_GROUPS = "groups";
  private List<GroupMapping> groups = new ArrayList<>();

  public static final String JSON_PROPERTY_OIDC_CUSTOM_FIELDS = "oidc_custom_fields";
  private Map<String, Object> oidcCustomFields = new HashMap<>();

  public static final String JSON_PROPERTY_ROLE = "role";
  private String role;

  public User() {
  }

  public User id(Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * minimum: 1
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }

  public User status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

  /**
   * status:   * &#x60;0&#x60; user is disabled, login is not allowed   * &#x60;1&#x60; user is enabled 
   * @return status
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public User username(String username) {
    
    this.username = username;
    return this;
  }

  /**
   * username is unique
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }

  public User email(String email) {
    
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(String email) {
    this.email = email;
  }

  public User description(String description) {
    
    this.description = description;
    return this;
  }

  /**
   * optional description, for example the user full name
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }

  public User expirationDate(Long expirationDate) {
    
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * expiration date as unix timestamp in milliseconds. An expired account cannot login. 0 means no expiration
   * @return expirationDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExpirationDate() {
    return expirationDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationDate(Long expirationDate) {
    this.expirationDate = expirationDate;
  }

  public User password(String password) {
    
    this.password = password;
    return this;
  }

  /**
   * If the password has no known hashing algo prefix it will be stored, by default, using bcrypt, argon2id is supported too. You can send a password hashed as bcrypt ($2a$ prefix), argon2id, pbkdf2 or unix crypt and it will be stored as is. For security reasons this field is omitted when you search/get users
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(String password) {
    this.password = password;
  }

  public User publicKeys(List<String> publicKeys) {
    
    this.publicKeys = publicKeys;
    return this;
  }

  public User addPublicKeysItem(String publicKeysItem) {
    if (this.publicKeys == null) {
      this.publicKeys = new ArrayList<>();
    }
    this.publicKeys.add(publicKeysItem);
    return this;
  }

  /**
   * Public keys in OpenSSH format.
   * @return publicKeys
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PUBLIC_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getPublicKeys() {
    return publicKeys;
  }


  @JsonProperty(JSON_PROPERTY_PUBLIC_KEYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPublicKeys(List<String> publicKeys) {
    this.publicKeys = publicKeys;
  }

  public User hasPassword(Boolean hasPassword) {
    
    this.hasPassword = hasPassword;
    return this;
  }

  /**
   * Indicates whether the password is set
   * @return hasPassword
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasPassword() {
    return hasPassword;
  }


  @JsonProperty(JSON_PROPERTY_HAS_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasPassword(Boolean hasPassword) {
    this.hasPassword = hasPassword;
  }

  public User homeDir(String homeDir) {
    
    this.homeDir = homeDir;
    return this;
  }

  /**
   * path to the user home directory. The user cannot upload or download files outside this directory. SFTPGo tries to automatically create this folder if missing. Must be an absolute path
   * @return homeDir
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOME_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHomeDir() {
    return homeDir;
  }


  @JsonProperty(JSON_PROPERTY_HOME_DIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHomeDir(String homeDir) {
    this.homeDir = homeDir;
  }

  public User virtualFolders(List<VirtualFolder> virtualFolders) {
    
    this.virtualFolders = virtualFolders;
    return this;
  }

  public User addVirtualFoldersItem(VirtualFolder virtualFoldersItem) {
    if (this.virtualFolders == null) {
      this.virtualFolders = new ArrayList<>();
    }
    this.virtualFolders.add(virtualFoldersItem);
    return this;
  }

  /**
   * mapping between virtual SFTPGo paths and virtual folders
   * @return virtualFolders
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VIRTUAL_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<VirtualFolder> getVirtualFolders() {
    return virtualFolders;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVirtualFolders(List<VirtualFolder> virtualFolders) {
    this.virtualFolders = virtualFolders;
  }

  public User uid(Integer uid) {
    
    this.uid = uid;
    return this;
  }

  /**
   * if you run SFTPGo as root user, the created files and directories will be assigned to this uid. 0 means no change, the owner will be the user that runs SFTPGo. Ignored on windows
   * minimum: 0
   * maximum: 2147483647
   * @return uid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUid() {
    return uid;
  }


  @JsonProperty(JSON_PROPERTY_UID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUid(Integer uid) {
    this.uid = uid;
  }

  public User gid(Integer gid) {
    
    this.gid = gid;
    return this;
  }

  /**
   * if you run SFTPGo as root user, the created files and directories will be assigned to this gid. 0 means no change, the group will be the one of the user that runs SFTPGo. Ignored on windows
   * minimum: 0
   * maximum: 2147483647
   * @return gid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGid() {
    return gid;
  }


  @JsonProperty(JSON_PROPERTY_GID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGid(Integer gid) {
    this.gid = gid;
  }

  public User maxSessions(Integer maxSessions) {
    
    this.maxSessions = maxSessions;
    return this;
  }

  /**
   * Limit the sessions that a user can open. 0 means unlimited
   * @return maxSessions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMaxSessions() {
    return maxSessions;
  }


  @JsonProperty(JSON_PROPERTY_MAX_SESSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxSessions(Integer maxSessions) {
    this.maxSessions = maxSessions;
  }

  public User quotaSize(Long quotaSize) {
    
    this.quotaSize = quotaSize;
    return this;
  }

  /**
   * Quota as size in bytes. 0 means unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
   * @return quotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuotaSize() {
    return quotaSize;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaSize(Long quotaSize) {
    this.quotaSize = quotaSize;
  }

  public User quotaFiles(Integer quotaFiles) {
    
    this.quotaFiles = quotaFiles;
    return this;
  }

  /**
   * Quota as number of files. 0 means unlimited. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
   * @return quotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuotaFiles() {
    return quotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaFiles(Integer quotaFiles) {
    this.quotaFiles = quotaFiles;
  }

  public User permissions(Map<String, List<Permission>> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public User putPermissionsItem(String key, List<Permission> permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new HashMap<>();
    }
    this.permissions.put(key, permissionsItem);
    return this;
  }

  /**
   * hash map with directory as key and an array of permissions as value. Directories must be absolute paths, permissions for root directory (\&quot;/\&quot;) are required
   * @return permissions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, List<Permission>> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPermissions(Map<String, List<Permission>> permissions) {
    this.permissions = permissions;
  }

  public User usedQuotaSize(Long usedQuotaSize) {
    
    this.usedQuotaSize = usedQuotaSize;
    return this;
  }

  /**
   * Get usedQuotaSize
   * @return usedQuotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedQuotaSize() {
    return usedQuotaSize;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaSize(Long usedQuotaSize) {
    this.usedQuotaSize = usedQuotaSize;
  }

  public User usedQuotaFiles(Integer usedQuotaFiles) {
    
    this.usedQuotaFiles = usedQuotaFiles;
    return this;
  }

  /**
   * Get usedQuotaFiles
   * @return usedQuotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedQuotaFiles() {
    return usedQuotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaFiles(Integer usedQuotaFiles) {
    this.usedQuotaFiles = usedQuotaFiles;
  }

  public User lastQuotaUpdate(Long lastQuotaUpdate) {
    
    this.lastQuotaUpdate = lastQuotaUpdate;
    return this;
  }

  /**
   * Last quota update as unix timestamp in milliseconds
   * @return lastQuotaUpdate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastQuotaUpdate() {
    return lastQuotaUpdate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastQuotaUpdate(Long lastQuotaUpdate) {
    this.lastQuotaUpdate = lastQuotaUpdate;
  }

  public User uploadBandwidth(Integer uploadBandwidth) {
    
    this.uploadBandwidth = uploadBandwidth;
    return this;
  }

  /**
   * Maximum upload bandwidth as KB/s, 0 means unlimited
   * @return uploadBandwidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUploadBandwidth() {
    return uploadBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadBandwidth(Integer uploadBandwidth) {
    this.uploadBandwidth = uploadBandwidth;
  }

  public User downloadBandwidth(Integer downloadBandwidth) {
    
    this.downloadBandwidth = downloadBandwidth;
    return this;
  }

  /**
   * Maximum download bandwidth as KB/s, 0 means unlimited
   * @return downloadBandwidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadBandwidth() {
    return downloadBandwidth;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadBandwidth(Integer downloadBandwidth) {
    this.downloadBandwidth = downloadBandwidth;
  }

  public User uploadDataTransfer(Integer uploadDataTransfer) {
    
    this.uploadDataTransfer = uploadDataTransfer;
    return this;
  }

  /**
   * Maximum data transfer allowed for uploads as MB. 0 means no limit
   * @return uploadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUploadDataTransfer() {
    return uploadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUploadDataTransfer(Integer uploadDataTransfer) {
    this.uploadDataTransfer = uploadDataTransfer;
  }

  public User downloadDataTransfer(Integer downloadDataTransfer) {
    
    this.downloadDataTransfer = downloadDataTransfer;
    return this;
  }

  /**
   * Maximum data transfer allowed for downloads as MB. 0 means no limit
   * @return downloadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDownloadDataTransfer() {
    return downloadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadDataTransfer(Integer downloadDataTransfer) {
    this.downloadDataTransfer = downloadDataTransfer;
  }

  public User totalDataTransfer(Integer totalDataTransfer) {
    
    this.totalDataTransfer = totalDataTransfer;
    return this;
  }

  /**
   * Maximum total data transfer as MB. 0 means unlimited. You can set a total data transfer instead of the individual values for uploads and downloads
   * @return totalDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalDataTransfer() {
    return totalDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalDataTransfer(Integer totalDataTransfer) {
    this.totalDataTransfer = totalDataTransfer;
  }

  public User usedUploadDataTransfer(Integer usedUploadDataTransfer) {
    
    this.usedUploadDataTransfer = usedUploadDataTransfer;
    return this;
  }

  /**
   * Uploaded size, as bytes, since the last reset
   * @return usedUploadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedUploadDataTransfer() {
    return usedUploadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_USED_UPLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedUploadDataTransfer(Integer usedUploadDataTransfer) {
    this.usedUploadDataTransfer = usedUploadDataTransfer;
  }

  public User usedDownloadDataTransfer(Integer usedDownloadDataTransfer) {
    
    this.usedDownloadDataTransfer = usedDownloadDataTransfer;
    return this;
  }

  /**
   * Downloaded size, as bytes, since the last reset
   * @return usedDownloadDataTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedDownloadDataTransfer() {
    return usedDownloadDataTransfer;
  }


  @JsonProperty(JSON_PROPERTY_USED_DOWNLOAD_DATA_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedDownloadDataTransfer(Integer usedDownloadDataTransfer) {
    this.usedDownloadDataTransfer = usedDownloadDataTransfer;
  }

  public User createdAt(Long createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

  /**
   * creation time as unix timestamp in milliseconds. It will be 0 for users created before v2.2.0
   * @return createdAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(Long createdAt) {
    this.createdAt = createdAt;
  }

  public User updatedAt(Long updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * last update time as unix timestamp in milliseconds
   * @return updatedAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(Long updatedAt) {
    this.updatedAt = updatedAt;
  }

  public User lastLogin(Long lastLogin) {
    
    this.lastLogin = lastLogin;
    return this;
  }

  /**
   * Last user login as unix timestamp in milliseconds. It is saved at most once every 10 minutes
   * @return lastLogin
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_LOGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastLogin() {
    return lastLogin;
  }


  @JsonProperty(JSON_PROPERTY_LAST_LOGIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastLogin(Long lastLogin) {
    this.lastLogin = lastLogin;
  }

  public User firstDownload(Long firstDownload) {
    
    this.firstDownload = firstDownload;
    return this;
  }

  /**
   * first download time as unix timestamp in milliseconds
   * @return firstDownload
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFirstDownload() {
    return firstDownload;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstDownload(Long firstDownload) {
    this.firstDownload = firstDownload;
  }

  public User firstUpload(Long firstUpload) {
    
    this.firstUpload = firstUpload;
    return this;
  }

  /**
   * first upload time as unix timestamp in milliseconds
   * @return firstUpload
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFirstUpload() {
    return firstUpload;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_UPLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstUpload(Long firstUpload) {
    this.firstUpload = firstUpload;
  }

  public User lastPasswordChange(Long lastPasswordChange) {
    
    this.lastPasswordChange = lastPasswordChange;
    return this;
  }

  /**
   * last password change time as unix timestamp in milliseconds
   * @return lastPasswordChange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastPasswordChange() {
    return lastPasswordChange;
  }


  @JsonProperty(JSON_PROPERTY_LAST_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastPasswordChange(Long lastPasswordChange) {
    this.lastPasswordChange = lastPasswordChange;
  }

  public User filters(UserFilters filters) {
    
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UserFilters getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(UserFilters filters) {
    this.filters = filters;
  }

  public User filesystem(FilesystemConfig filesystem) {
    
    this.filesystem = filesystem;
    return this;
  }

  /**
   * Get filesystem
   * @return filesystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilesystemConfig getFilesystem() {
    return filesystem;
  }


  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesystem(FilesystemConfig filesystem) {
    this.filesystem = filesystem;
  }

  public User additionalInfo(String additionalInfo) {
    
    this.additionalInfo = additionalInfo;
    return this;
  }

  /**
   * Free form text field for external systems
   * @return additionalInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalInfo() {
    return additionalInfo;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalInfo(String additionalInfo) {
    this.additionalInfo = additionalInfo;
  }

  public User groups(List<GroupMapping> groups) {
    
    this.groups = groups;
    return this;
  }

  public User addGroupsItem(GroupMapping groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<GroupMapping> getGroups() {
    return groups;
  }


  @JsonProperty(JSON_PROPERTY_GROUPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGroups(List<GroupMapping> groups) {
    this.groups = groups;
  }

  public User oidcCustomFields(Map<String, Object> oidcCustomFields) {
    
    this.oidcCustomFields = oidcCustomFields;
    return this;
  }

  public User putOidcCustomFieldsItem(String key, Object oidcCustomFieldsItem) {
    if (this.oidcCustomFields == null) {
      this.oidcCustomFields = new HashMap<>();
    }
    this.oidcCustomFields.put(key, oidcCustomFieldsItem);
    return this;
  }

  /**
   * This field is passed to the pre-login hook if custom OIDC token fields have been configured. Field values can be of any type (this is a free form object) and depend on the type of the configured OIDC token fields
   * @return oidcCustomFields
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OIDC_CUSTOM_FIELDS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, Object> getOidcCustomFields() {
    return oidcCustomFields;
  }


  @JsonProperty(JSON_PROPERTY_OIDC_CUSTOM_FIELDS)
  @JsonInclude(content = JsonInclude.Include.ALWAYS, value = JsonInclude.Include.USE_DEFAULTS)
  public void setOidcCustomFields(Map<String, Object> oidcCustomFields) {
    this.oidcCustomFields = oidcCustomFields;
  }

  public User role(String role) {
    
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRole(String role) {
    this.role = role;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.status, user.status) &&
        Objects.equals(this.username, user.username) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.description, user.description) &&
        Objects.equals(this.expirationDate, user.expirationDate) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.publicKeys, user.publicKeys) &&
        Objects.equals(this.hasPassword, user.hasPassword) &&
        Objects.equals(this.homeDir, user.homeDir) &&
        Objects.equals(this.virtualFolders, user.virtualFolders) &&
        Objects.equals(this.uid, user.uid) &&
        Objects.equals(this.gid, user.gid) &&
        Objects.equals(this.maxSessions, user.maxSessions) &&
        Objects.equals(this.quotaSize, user.quotaSize) &&
        Objects.equals(this.quotaFiles, user.quotaFiles) &&
        Objects.equals(this.permissions, user.permissions) &&
        Objects.equals(this.usedQuotaSize, user.usedQuotaSize) &&
        Objects.equals(this.usedQuotaFiles, user.usedQuotaFiles) &&
        Objects.equals(this.lastQuotaUpdate, user.lastQuotaUpdate) &&
        Objects.equals(this.uploadBandwidth, user.uploadBandwidth) &&
        Objects.equals(this.downloadBandwidth, user.downloadBandwidth) &&
        Objects.equals(this.uploadDataTransfer, user.uploadDataTransfer) &&
        Objects.equals(this.downloadDataTransfer, user.downloadDataTransfer) &&
        Objects.equals(this.totalDataTransfer, user.totalDataTransfer) &&
        Objects.equals(this.usedUploadDataTransfer, user.usedUploadDataTransfer) &&
        Objects.equals(this.usedDownloadDataTransfer, user.usedDownloadDataTransfer) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.lastLogin, user.lastLogin) &&
        Objects.equals(this.firstDownload, user.firstDownload) &&
        Objects.equals(this.firstUpload, user.firstUpload) &&
        Objects.equals(this.lastPasswordChange, user.lastPasswordChange) &&
        Objects.equals(this.filters, user.filters) &&
        Objects.equals(this.filesystem, user.filesystem) &&
        Objects.equals(this.additionalInfo, user.additionalInfo) &&
        Objects.equals(this.groups, user.groups) &&
        Objects.equals(this.oidcCustomFields, user.oidcCustomFields) &&
        Objects.equals(this.role, user.role);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, status, username, email, description, expirationDate, password, publicKeys, hasPassword, homeDir, virtualFolders, uid, gid, maxSessions, quotaSize, quotaFiles, permissions, usedQuotaSize, usedQuotaFiles, lastQuotaUpdate, uploadBandwidth, downloadBandwidth, uploadDataTransfer, downloadDataTransfer, totalDataTransfer, usedUploadDataTransfer, usedDownloadDataTransfer, createdAt, updatedAt, lastLogin, firstDownload, firstUpload, lastPasswordChange, filters, filesystem, additionalInfo, groups, oidcCustomFields, role);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    password: ").append("*").append("\n");
    sb.append("    publicKeys: ").append(toIndentedString(publicKeys)).append("\n");
    sb.append("    hasPassword: ").append(toIndentedString(hasPassword)).append("\n");
    sb.append("    homeDir: ").append(toIndentedString(homeDir)).append("\n");
    sb.append("    virtualFolders: ").append(toIndentedString(virtualFolders)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    maxSessions: ").append(toIndentedString(maxSessions)).append("\n");
    sb.append("    quotaSize: ").append(toIndentedString(quotaSize)).append("\n");
    sb.append("    quotaFiles: ").append(toIndentedString(quotaFiles)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    usedQuotaSize: ").append(toIndentedString(usedQuotaSize)).append("\n");
    sb.append("    usedQuotaFiles: ").append(toIndentedString(usedQuotaFiles)).append("\n");
    sb.append("    lastQuotaUpdate: ").append(toIndentedString(lastQuotaUpdate)).append("\n");
    sb.append("    uploadBandwidth: ").append(toIndentedString(uploadBandwidth)).append("\n");
    sb.append("    downloadBandwidth: ").append(toIndentedString(downloadBandwidth)).append("\n");
    sb.append("    uploadDataTransfer: ").append(toIndentedString(uploadDataTransfer)).append("\n");
    sb.append("    downloadDataTransfer: ").append(toIndentedString(downloadDataTransfer)).append("\n");
    sb.append("    totalDataTransfer: ").append(toIndentedString(totalDataTransfer)).append("\n");
    sb.append("    usedUploadDataTransfer: ").append(toIndentedString(usedUploadDataTransfer)).append("\n");
    sb.append("    usedDownloadDataTransfer: ").append(toIndentedString(usedDownloadDataTransfer)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    firstDownload: ").append(toIndentedString(firstDownload)).append("\n");
    sb.append("    firstUpload: ").append(toIndentedString(firstUpload)).append("\n");
    sb.append("    lastPasswordChange: ").append(toIndentedString(lastPasswordChange)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    filesystem: ").append(toIndentedString(filesystem)).append("\n");
    sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    oidcCustomFields: ").append(toIndentedString(oidcCustomFields)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

