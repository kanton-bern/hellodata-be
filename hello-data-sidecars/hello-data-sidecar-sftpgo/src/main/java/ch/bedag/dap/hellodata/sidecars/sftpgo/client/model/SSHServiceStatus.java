/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date.
 *
 * The version of the OpenAPI document: 2.6.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.openapitools.jackson.nullable.JsonNullable;

import java.util.*;

/**
 * SSHServiceStatus
 */
@JsonPropertyOrder({
        SSHServiceStatus.JSON_PROPERTY_IS_ACTIVE,
        SSHServiceStatus.JSON_PROPERTY_BINDINGS,
        SSHServiceStatus.JSON_PROPERTY_HOST_KEYS,
        SSHServiceStatus.JSON_PROPERTY_SSH_COMMANDS,
        SSHServiceStatus.JSON_PROPERTY_AUTHENTICATIONS,
        SSHServiceStatus.JSON_PROPERTY_PUBLIC_KEY_ALGORITHMS,
        SSHServiceStatus.JSON_PROPERTY_MACS,
        SSHServiceStatus.JSON_PROPERTY_KEX_ALGORITHMS,
        SSHServiceStatus.JSON_PROPERTY_CIPHERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class SSHServiceStatus {
    public static final String JSON_PROPERTY_IS_ACTIVE = "is_active";
    public static final String JSON_PROPERTY_BINDINGS = "bindings";
    public static final String JSON_PROPERTY_HOST_KEYS = "host_keys";
    public static final String JSON_PROPERTY_SSH_COMMANDS = "ssh_commands";
    public static final String JSON_PROPERTY_AUTHENTICATIONS = "authentications";
    public static final String JSON_PROPERTY_PUBLIC_KEY_ALGORITHMS = "public_key_algorithms";
    public static final String JSON_PROPERTY_MACS = "macs";
    public static final String JSON_PROPERTY_KEX_ALGORITHMS = "kex_algorithms";
    public static final String JSON_PROPERTY_CIPHERS = "ciphers";
    private Boolean isActive;
    private JsonNullable<List<SSHBinding>> bindings = JsonNullable.<List<SSHBinding>>undefined();
    private JsonNullable<List<SSHHostKey>> hostKeys = JsonNullable.<List<SSHHostKey>>undefined();
    private List<String> sshCommands = new ArrayList<>();
    private List<SSHAuthentications> authentications = new ArrayList<>();
    private List<String> publicKeyAlgorithms = new ArrayList<>();
    private List<String> macs = new ArrayList<>();
    private List<String> kexAlgorithms = new ArrayList<>();
    private List<String> ciphers = new ArrayList<>();

    public SSHServiceStatus() {
    }

    private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
        return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
    }

    private static <T> int hashCodeNullable(JsonNullable<T> a) {
        if (a == null) {
            return 1;
        }
        return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
    }

    public SSHServiceStatus isActive(Boolean isActive) {

        this.isActive = isActive;
        return this;
    }

    /**
     * Get isActive
     *
     * @return isActive
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getIsActive() {
        return isActive;
    }

    @JsonProperty(JSON_PROPERTY_IS_ACTIVE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public SSHServiceStatus bindings(List<SSHBinding> bindings) {
        this.bindings = JsonNullable.<List<SSHBinding>>of(bindings);

        return this;
    }

    public SSHServiceStatus addBindingsItem(SSHBinding bindingsItem) {
        if (this.bindings == null || !this.bindings.isPresent()) {
            this.bindings = JsonNullable.<List<SSHBinding>>of(new ArrayList<>());
        }
        try {
            this.bindings.get().add(bindingsItem);
        } catch (NoSuchElementException e) {
            // this can never happen, as we make sure above that the value is present
        }
        return this;
    }

    /**
     * Get bindings
     *
     * @return bindings
     */
    @javax.annotation.Nullable
    @JsonIgnore

    public List<SSHBinding> getBindings() {
        return bindings.orElse(null);
    }

    public void setBindings(List<SSHBinding> bindings) {
        this.bindings = JsonNullable.<List<SSHBinding>>of(bindings);
    }

    @JsonProperty(JSON_PROPERTY_BINDINGS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public JsonNullable<List<SSHBinding>> getBindings_JsonNullable() {
        return bindings;
    }

    @JsonProperty(JSON_PROPERTY_BINDINGS)
    public void setBindings_JsonNullable(JsonNullable<List<SSHBinding>> bindings) {
        this.bindings = bindings;
    }

    public SSHServiceStatus hostKeys(List<SSHHostKey> hostKeys) {
        this.hostKeys = JsonNullable.<List<SSHHostKey>>of(hostKeys);

        return this;
    }

    public SSHServiceStatus addHostKeysItem(SSHHostKey hostKeysItem) {
        if (this.hostKeys == null || !this.hostKeys.isPresent()) {
            this.hostKeys = JsonNullable.<List<SSHHostKey>>of(new ArrayList<>());
        }
        try {
            this.hostKeys.get().add(hostKeysItem);
        } catch (NoSuchElementException e) {
            // this can never happen, as we make sure above that the value is present
        }
        return this;
    }

    /**
     * Get hostKeys
     *
     * @return hostKeys
     */
    @javax.annotation.Nullable
    @JsonIgnore

    public List<SSHHostKey> getHostKeys() {
        return hostKeys.orElse(null);
    }

    public void setHostKeys(List<SSHHostKey> hostKeys) {
        this.hostKeys = JsonNullable.<List<SSHHostKey>>of(hostKeys);
    }

    @JsonProperty(JSON_PROPERTY_HOST_KEYS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public JsonNullable<List<SSHHostKey>> getHostKeys_JsonNullable() {
        return hostKeys;
    }

    @JsonProperty(JSON_PROPERTY_HOST_KEYS)
    public void setHostKeys_JsonNullable(JsonNullable<List<SSHHostKey>> hostKeys) {
        this.hostKeys = hostKeys;
    }

    public SSHServiceStatus sshCommands(List<String> sshCommands) {

        this.sshCommands = sshCommands;
        return this;
    }

    public SSHServiceStatus addSshCommandsItem(String sshCommandsItem) {
        if (this.sshCommands == null) {
            this.sshCommands = new ArrayList<>();
        }
        this.sshCommands.add(sshCommandsItem);
        return this;
    }

    /**
     * Get sshCommands
     *
     * @return sshCommands
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_SSH_COMMANDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getSshCommands() {
        return sshCommands;
    }

    @JsonProperty(JSON_PROPERTY_SSH_COMMANDS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSshCommands(List<String> sshCommands) {
        this.sshCommands = sshCommands;
    }

    public SSHServiceStatus authentications(List<SSHAuthentications> authentications) {

        this.authentications = authentications;
        return this;
    }

    public SSHServiceStatus addAuthenticationsItem(SSHAuthentications authenticationsItem) {
        if (this.authentications == null) {
            this.authentications = new ArrayList<>();
        }
        this.authentications.add(authenticationsItem);
        return this;
    }

    /**
     * Get authentications
     *
     * @return authentications
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_AUTHENTICATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<SSHAuthentications> getAuthentications() {
        return authentications;
    }

    @JsonProperty(JSON_PROPERTY_AUTHENTICATIONS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAuthentications(List<SSHAuthentications> authentications) {
        this.authentications = authentications;
    }

    public SSHServiceStatus publicKeyAlgorithms(List<String> publicKeyAlgorithms) {

        this.publicKeyAlgorithms = publicKeyAlgorithms;
        return this;
    }

    public SSHServiceStatus addPublicKeyAlgorithmsItem(String publicKeyAlgorithmsItem) {
        if (this.publicKeyAlgorithms == null) {
            this.publicKeyAlgorithms = new ArrayList<>();
        }
        this.publicKeyAlgorithms.add(publicKeyAlgorithmsItem);
        return this;
    }

    /**
     * Get publicKeyAlgorithms
     *
     * @return publicKeyAlgorithms
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY_ALGORITHMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getPublicKeyAlgorithms() {
        return publicKeyAlgorithms;
    }

    @JsonProperty(JSON_PROPERTY_PUBLIC_KEY_ALGORITHMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPublicKeyAlgorithms(List<String> publicKeyAlgorithms) {
        this.publicKeyAlgorithms = publicKeyAlgorithms;
    }

    public SSHServiceStatus macs(List<String> macs) {

        this.macs = macs;
        return this;
    }

    public SSHServiceStatus addMacsItem(String macsItem) {
        if (this.macs == null) {
            this.macs = new ArrayList<>();
        }
        this.macs.add(macsItem);
        return this;
    }

    /**
     * Get macs
     *
     * @return macs
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_MACS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getMacs() {
        return macs;
    }

    @JsonProperty(JSON_PROPERTY_MACS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setMacs(List<String> macs) {
        this.macs = macs;
    }

    public SSHServiceStatus kexAlgorithms(List<String> kexAlgorithms) {

        this.kexAlgorithms = kexAlgorithms;
        return this;
    }

    public SSHServiceStatus addKexAlgorithmsItem(String kexAlgorithmsItem) {
        if (this.kexAlgorithms == null) {
            this.kexAlgorithms = new ArrayList<>();
        }
        this.kexAlgorithms.add(kexAlgorithmsItem);
        return this;
    }

    /**
     * Get kexAlgorithms
     *
     * @return kexAlgorithms
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_KEX_ALGORITHMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getKexAlgorithms() {
        return kexAlgorithms;
    }

    @JsonProperty(JSON_PROPERTY_KEX_ALGORITHMS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setKexAlgorithms(List<String> kexAlgorithms) {
        this.kexAlgorithms = kexAlgorithms;
    }

    public SSHServiceStatus ciphers(List<String> ciphers) {

        this.ciphers = ciphers;
        return this;
    }

    public SSHServiceStatus addCiphersItem(String ciphersItem) {
        if (this.ciphers == null) {
            this.ciphers = new ArrayList<>();
        }
        this.ciphers.add(ciphersItem);
        return this;
    }

    /**
     * Get ciphers
     *
     * @return ciphers
     */
    @javax.annotation.Nullable
    @JsonProperty(JSON_PROPERTY_CIPHERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<String> getCiphers() {
        return ciphers;
    }

    @JsonProperty(JSON_PROPERTY_CIPHERS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCiphers(List<String> ciphers) {
        this.ciphers = ciphers;
    }

    @Override
    public int hashCode() {
        return Objects.hash(isActive, hashCodeNullable(bindings), hashCodeNullable(hostKeys), sshCommands, authentications, publicKeyAlgorithms, macs, kexAlgorithms, ciphers);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SSHServiceStatus ssHServiceStatus = (SSHServiceStatus) o;
        return Objects.equals(this.isActive, ssHServiceStatus.isActive) &&
                equalsNullable(this.bindings, ssHServiceStatus.bindings) &&
                equalsNullable(this.hostKeys, ssHServiceStatus.hostKeys) &&
                Objects.equals(this.sshCommands, ssHServiceStatus.sshCommands) &&
                Objects.equals(this.authentications, ssHServiceStatus.authentications) &&
                Objects.equals(this.publicKeyAlgorithms, ssHServiceStatus.publicKeyAlgorithms) &&
                Objects.equals(this.macs, ssHServiceStatus.macs) &&
                Objects.equals(this.kexAlgorithms, ssHServiceStatus.kexAlgorithms) &&
                Objects.equals(this.ciphers, ssHServiceStatus.ciphers);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SSHServiceStatus {\n");
        sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
        sb.append("    bindings: ").append(toIndentedString(bindings)).append("\n");
        sb.append("    hostKeys: ").append(toIndentedString(hostKeys)).append("\n");
        sb.append("    sshCommands: ").append(toIndentedString(sshCommands)).append("\n");
        sb.append("    authentications: ").append(toIndentedString(authentications)).append("\n");
        sb.append("    publicKeyAlgorithms: ").append(toIndentedString(publicKeyAlgorithms)).append("\n");
        sb.append("    macs: ").append(toIndentedString(macs)).append("\n");
        sb.append("    kexAlgorithms: ").append(toIndentedString(kexAlgorithms)).append("\n");
        sb.append("    ciphers: ").append(toIndentedString(ciphers)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

