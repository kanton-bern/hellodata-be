/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VersionInfo
 */
@JsonPropertyOrder({
  VersionInfo.JSON_PROPERTY_VERSION,
  VersionInfo.JSON_PROPERTY_BUILD_DATE,
  VersionInfo.JSON_PROPERTY_COMMIT_HASH,
  VersionInfo.JSON_PROPERTY_FEATURES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class VersionInfo {
  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;

  public static final String JSON_PROPERTY_BUILD_DATE = "build_date";
  private String buildDate;

  public static final String JSON_PROPERTY_COMMIT_HASH = "commit_hash";
  private String commitHash;

  public static final String JSON_PROPERTY_FEATURES = "features";
  private List<String> features = new ArrayList<>();

  public VersionInfo() {
  }

  public VersionInfo version(String version) {
    
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersion(String version) {
    this.version = version;
  }

  public VersionInfo buildDate(String buildDate) {
    
    this.buildDate = buildDate;
    return this;
  }

  /**
   * Get buildDate
   * @return buildDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildDate() {
    return buildDate;
  }


  @JsonProperty(JSON_PROPERTY_BUILD_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildDate(String buildDate) {
    this.buildDate = buildDate;
  }

  public VersionInfo commitHash(String commitHash) {
    
    this.commitHash = commitHash;
    return this;
  }

  /**
   * Get commitHash
   * @return commitHash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommitHash() {
    return commitHash;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitHash(String commitHash) {
    this.commitHash = commitHash;
  }

  public VersionInfo features(List<String> features) {
    
    this.features = features;
    return this;
  }

  public VersionInfo addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Features for the current build. Available features are &#x60;portable&#x60;, &#x60;bolt&#x60;, &#x60;mysql&#x60;, &#x60;sqlite&#x60;, &#x60;pgsql&#x60;, &#x60;s3&#x60;, &#x60;gcs&#x60;, &#x60;azblob&#x60;, &#x60;metrics&#x60;, &#x60;unixcrypt&#x60;. If a feature is available it has a &#x60;+&#x60; prefix, otherwise a &#x60;-&#x60; prefix
   * @return features
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFeatures() {
    return features;
  }


  @JsonProperty(JSON_PROPERTY_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeatures(List<String> features) {
    this.features = features;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionInfo versionInfo = (VersionInfo) o;
    return Objects.equals(this.version, versionInfo.version) &&
        Objects.equals(this.buildDate, versionInfo.buildDate) &&
        Objects.equals(this.commitHash, versionInfo.commitHash) &&
        Objects.equals(this.features, versionInfo.features);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, buildDate, commitHash, features);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionInfo {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    buildDate: ").append(toIndentedString(buildDate)).append("\n");
    sb.append("    commitHash: ").append(toIndentedString(commitHash)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

