/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.FilesystemConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Defines the filesystem for the virtual folder and the used quota limits. The same folder can be shared among multiple users and each user can have different quota limits or a different virtual path.
 */
@JsonPropertyOrder({
  BaseVirtualFolder.JSON_PROPERTY_ID,
  BaseVirtualFolder.JSON_PROPERTY_NAME,
  BaseVirtualFolder.JSON_PROPERTY_MAPPED_PATH,
  BaseVirtualFolder.JSON_PROPERTY_DESCRIPTION,
  BaseVirtualFolder.JSON_PROPERTY_USED_QUOTA_SIZE,
  BaseVirtualFolder.JSON_PROPERTY_USED_QUOTA_FILES,
  BaseVirtualFolder.JSON_PROPERTY_LAST_QUOTA_UPDATE,
  BaseVirtualFolder.JSON_PROPERTY_USERS,
  BaseVirtualFolder.JSON_PROPERTY_FILESYSTEM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class BaseVirtualFolder {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MAPPED_PATH = "mapped_path";
  private String mappedPath;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_USED_QUOTA_SIZE = "used_quota_size";
  private Long usedQuotaSize;

  public static final String JSON_PROPERTY_USED_QUOTA_FILES = "used_quota_files";
  private Integer usedQuotaFiles;

  public static final String JSON_PROPERTY_LAST_QUOTA_UPDATE = "last_quota_update";
  private Long lastQuotaUpdate;

  public static final String JSON_PROPERTY_USERS = "users";
  private List<String> users = new ArrayList<>();

  public static final String JSON_PROPERTY_FILESYSTEM = "filesystem";
  private FilesystemConfig filesystem;

  public BaseVirtualFolder() {
  }

  public BaseVirtualFolder id(Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * minimum: 1
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }

  public BaseVirtualFolder name(String name) {
    
    this.name = name;
    return this;
  }

  /**
   * unique name for this virtual folder
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public BaseVirtualFolder mappedPath(String mappedPath) {
    
    this.mappedPath = mappedPath;
    return this;
  }

  /**
   * absolute filesystem path to use as virtual folder
   * @return mappedPath
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAPPED_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMappedPath() {
    return mappedPath;
  }


  @JsonProperty(JSON_PROPERTY_MAPPED_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMappedPath(String mappedPath) {
    this.mappedPath = mappedPath;
  }

  public BaseVirtualFolder description(String description) {
    
    this.description = description;
    return this;
  }

  /**
   * optional description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }

  public BaseVirtualFolder usedQuotaSize(Long usedQuotaSize) {
    
    this.usedQuotaSize = usedQuotaSize;
    return this;
  }

  /**
   * Get usedQuotaSize
   * @return usedQuotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedQuotaSize() {
    return usedQuotaSize;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaSize(Long usedQuotaSize) {
    this.usedQuotaSize = usedQuotaSize;
  }

  public BaseVirtualFolder usedQuotaFiles(Integer usedQuotaFiles) {
    
    this.usedQuotaFiles = usedQuotaFiles;
    return this;
  }

  /**
   * Get usedQuotaFiles
   * @return usedQuotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedQuotaFiles() {
    return usedQuotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaFiles(Integer usedQuotaFiles) {
    this.usedQuotaFiles = usedQuotaFiles;
  }

  public BaseVirtualFolder lastQuotaUpdate(Long lastQuotaUpdate) {
    
    this.lastQuotaUpdate = lastQuotaUpdate;
    return this;
  }

  /**
   * Last quota update as unix timestamp in milliseconds
   * @return lastQuotaUpdate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastQuotaUpdate() {
    return lastQuotaUpdate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastQuotaUpdate(Long lastQuotaUpdate) {
    this.lastQuotaUpdate = lastQuotaUpdate;
  }

  public BaseVirtualFolder users(List<String> users) {
    
    this.users = users;
    return this;
  }

  public BaseVirtualFolder addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * list of usernames associated with this virtual folder
   * @return users
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<String> users) {
    this.users = users;
  }

  public BaseVirtualFolder filesystem(FilesystemConfig filesystem) {
    
    this.filesystem = filesystem;
    return this;
  }

  /**
   * Get filesystem
   * @return filesystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilesystemConfig getFilesystem() {
    return filesystem;
  }


  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesystem(FilesystemConfig filesystem) {
    this.filesystem = filesystem;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseVirtualFolder baseVirtualFolder = (BaseVirtualFolder) o;
    return Objects.equals(this.id, baseVirtualFolder.id) &&
        Objects.equals(this.name, baseVirtualFolder.name) &&
        Objects.equals(this.mappedPath, baseVirtualFolder.mappedPath) &&
        Objects.equals(this.description, baseVirtualFolder.description) &&
        Objects.equals(this.usedQuotaSize, baseVirtualFolder.usedQuotaSize) &&
        Objects.equals(this.usedQuotaFiles, baseVirtualFolder.usedQuotaFiles) &&
        Objects.equals(this.lastQuotaUpdate, baseVirtualFolder.lastQuotaUpdate) &&
        Objects.equals(this.users, baseVirtualFolder.users) &&
        Objects.equals(this.filesystem, baseVirtualFolder.filesystem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, mappedPath, description, usedQuotaSize, usedQuotaFiles, lastQuotaUpdate, users, filesystem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseVirtualFolder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mappedPath: ").append(toIndentedString(mappedPath)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    usedQuotaSize: ").append(toIndentedString(usedQuotaSize)).append("\n");
    sb.append("    usedQuotaFiles: ").append(toIndentedString(usedQuotaFiles)).append("\n");
    sb.append("    lastQuotaUpdate: ").append(toIndentedString(lastQuotaUpdate)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    filesystem: ").append(toIndentedString(filesystem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

