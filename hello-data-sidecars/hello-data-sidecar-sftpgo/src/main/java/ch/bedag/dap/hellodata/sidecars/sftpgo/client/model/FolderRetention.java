/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FolderRetention
 */
@JsonPropertyOrder({
  FolderRetention.JSON_PROPERTY_PATH,
  FolderRetention.JSON_PROPERTY_RETENTION,
  FolderRetention.JSON_PROPERTY_DELETE_EMPTY_DIRS,
  FolderRetention.JSON_PROPERTY_IGNORE_USER_PERMISSIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class FolderRetention {
  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_RETENTION = "retention";
  private Integer retention;

  public static final String JSON_PROPERTY_DELETE_EMPTY_DIRS = "delete_empty_dirs";
  private Boolean deleteEmptyDirs;

  public static final String JSON_PROPERTY_IGNORE_USER_PERMISSIONS = "ignore_user_permissions";
  private Boolean ignoreUserPermissions;

  public FolderRetention() {
  }

  public FolderRetention path(String path) {
    
    this.path = path;
    return this;
  }

  /**
   * virtual directory path as seen by users, if no other specific retention is defined, the retention applies for sub directories too. For example if retention is defined for the paths \&quot;/\&quot; and \&quot;/sub\&quot; then the retention for \&quot;/\&quot; is applied for any file outside the \&quot;/sub\&quot; directory
   * @return path
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }

  public FolderRetention retention(Integer retention) {
    
    this.retention = retention;
    return this;
  }

  /**
   * retention time in hours. All the files with a modification time older than the defined value will be deleted. 0 means exclude this path
   * @return retention
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RETENTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRetention() {
    return retention;
  }


  @JsonProperty(JSON_PROPERTY_RETENTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetention(Integer retention) {
    this.retention = retention;
  }

  public FolderRetention deleteEmptyDirs(Boolean deleteEmptyDirs) {
    
    this.deleteEmptyDirs = deleteEmptyDirs;
    return this;
  }

  /**
   * if enabled, empty directories will be deleted
   * @return deleteEmptyDirs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_EMPTY_DIRS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDeleteEmptyDirs() {
    return deleteEmptyDirs;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_EMPTY_DIRS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteEmptyDirs(Boolean deleteEmptyDirs) {
    this.deleteEmptyDirs = deleteEmptyDirs;
  }

  public FolderRetention ignoreUserPermissions(Boolean ignoreUserPermissions) {
    
    this.ignoreUserPermissions = ignoreUserPermissions;
    return this;
  }

  /**
   * if enabled, files will be deleted even if the user does not have the delete permission. The default is \&quot;false\&quot; which means that files will be skipped if the user does not have permission to delete them. File patterns filters will always be silently ignored
   * @return ignoreUserPermissions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_USER_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreUserPermissions() {
    return ignoreUserPermissions;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_USER_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreUserPermissions(Boolean ignoreUserPermissions) {
    this.ignoreUserPermissions = ignoreUserPermissions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderRetention folderRetention = (FolderRetention) o;
    return Objects.equals(this.path, folderRetention.path) &&
        Objects.equals(this.retention, folderRetention.retention) &&
        Objects.equals(this.deleteEmptyDirs, folderRetention.deleteEmptyDirs) &&
        Objects.equals(this.ignoreUserPermissions, folderRetention.ignoreUserPermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, retention, deleteEmptyDirs, ignoreUserPermissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderRetention {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    retention: ").append(toIndentedString(retention)).append("\n");
    sb.append("    deleteEmptyDirs: ").append(toIndentedString(deleteEmptyDirs)).append("\n");
    sb.append("    ignoreUserPermissions: ").append(toIndentedString(ignoreUserPermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

