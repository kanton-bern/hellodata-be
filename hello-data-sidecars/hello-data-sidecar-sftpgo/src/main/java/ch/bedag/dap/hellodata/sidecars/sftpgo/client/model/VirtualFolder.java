/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.FilesystemConfig;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A virtual folder is a mapping between a SFTPGo virtual path and a filesystem path outside the user home directory. The specified paths must be absolute and the virtual path cannot be \&quot;/\&quot;, it must be a sub directory. The parent directory for the specified virtual path must exist. SFTPGo will try to automatically create any missing parent directory for the configured virtual folders at user login.
 */
@JsonPropertyOrder({
  VirtualFolder.JSON_PROPERTY_ID,
  VirtualFolder.JSON_PROPERTY_NAME,
  VirtualFolder.JSON_PROPERTY_MAPPED_PATH,
  VirtualFolder.JSON_PROPERTY_DESCRIPTION,
  VirtualFolder.JSON_PROPERTY_USED_QUOTA_SIZE,
  VirtualFolder.JSON_PROPERTY_USED_QUOTA_FILES,
  VirtualFolder.JSON_PROPERTY_LAST_QUOTA_UPDATE,
  VirtualFolder.JSON_PROPERTY_USERS,
  VirtualFolder.JSON_PROPERTY_FILESYSTEM,
  VirtualFolder.JSON_PROPERTY_VIRTUAL_PATH,
  VirtualFolder.JSON_PROPERTY_QUOTA_SIZE,
  VirtualFolder.JSON_PROPERTY_QUOTA_FILES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class VirtualFolder {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MAPPED_PATH = "mapped_path";
  private String mappedPath;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_USED_QUOTA_SIZE = "used_quota_size";
  private Long usedQuotaSize;

  public static final String JSON_PROPERTY_USED_QUOTA_FILES = "used_quota_files";
  private Integer usedQuotaFiles;

  public static final String JSON_PROPERTY_LAST_QUOTA_UPDATE = "last_quota_update";
  private Long lastQuotaUpdate;

  public static final String JSON_PROPERTY_USERS = "users";
  private List<String> users = new ArrayList<>();

  public static final String JSON_PROPERTY_FILESYSTEM = "filesystem";
  private FilesystemConfig filesystem;

  public static final String JSON_PROPERTY_VIRTUAL_PATH = "virtual_path";
  private String virtualPath;

  public static final String JSON_PROPERTY_QUOTA_SIZE = "quota_size";
  private Long quotaSize;

  public static final String JSON_PROPERTY_QUOTA_FILES = "quota_files";
  private Integer quotaFiles;

  public VirtualFolder() {
  }

  public VirtualFolder id(Integer id) {
    
    this.id = id;
    return this;
  }

  /**
   * Get id
   * minimum: 1
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }

  public VirtualFolder name(String name) {
    
    this.name = name;
    return this;
  }

  /**
   * unique name for this virtual folder
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  public VirtualFolder mappedPath(String mappedPath) {
    
    this.mappedPath = mappedPath;
    return this;
  }

  /**
   * absolute filesystem path to use as virtual folder
   * @return mappedPath
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAPPED_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMappedPath() {
    return mappedPath;
  }


  @JsonProperty(JSON_PROPERTY_MAPPED_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMappedPath(String mappedPath) {
    this.mappedPath = mappedPath;
  }

  public VirtualFolder description(String description) {
    
    this.description = description;
    return this;
  }

  /**
   * optional description
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }

  public VirtualFolder usedQuotaSize(Long usedQuotaSize) {
    
    this.usedQuotaSize = usedQuotaSize;
    return this;
  }

  /**
   * Get usedQuotaSize
   * @return usedQuotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUsedQuotaSize() {
    return usedQuotaSize;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaSize(Long usedQuotaSize) {
    this.usedQuotaSize = usedQuotaSize;
  }

  public VirtualFolder usedQuotaFiles(Integer usedQuotaFiles) {
    
    this.usedQuotaFiles = usedQuotaFiles;
    return this;
  }

  /**
   * Get usedQuotaFiles
   * @return usedQuotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUsedQuotaFiles() {
    return usedQuotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_USED_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsedQuotaFiles(Integer usedQuotaFiles) {
    this.usedQuotaFiles = usedQuotaFiles;
  }

  public VirtualFolder lastQuotaUpdate(Long lastQuotaUpdate) {
    
    this.lastQuotaUpdate = lastQuotaUpdate;
    return this;
  }

  /**
   * Last quota update as unix timestamp in milliseconds
   * @return lastQuotaUpdate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getLastQuotaUpdate() {
    return lastQuotaUpdate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_QUOTA_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastQuotaUpdate(Long lastQuotaUpdate) {
    this.lastQuotaUpdate = lastQuotaUpdate;
  }

  public VirtualFolder users(List<String> users) {
    
    this.users = users;
    return this;
  }

  public VirtualFolder addUsersItem(String usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

  /**
   * list of usernames associated with this virtual folder
   * @return users
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<String> users) {
    this.users = users;
  }

  public VirtualFolder filesystem(FilesystemConfig filesystem) {
    
    this.filesystem = filesystem;
    return this;
  }

  /**
   * Get filesystem
   * @return filesystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FilesystemConfig getFilesystem() {
    return filesystem;
  }


  @JsonProperty(JSON_PROPERTY_FILESYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesystem(FilesystemConfig filesystem) {
    this.filesystem = filesystem;
  }

  public VirtualFolder virtualPath(String virtualPath) {
    
    this.virtualPath = virtualPath;
    return this;
  }

  /**
   * Get virtualPath
   * @return virtualPath
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIRTUAL_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getVirtualPath() {
    return virtualPath;
  }


  @JsonProperty(JSON_PROPERTY_VIRTUAL_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVirtualPath(String virtualPath) {
    this.virtualPath = virtualPath;
  }

  public VirtualFolder quotaSize(Long quotaSize) {
    
    this.quotaSize = quotaSize;
    return this;
  }

  /**
   * Quota as size in bytes. 0 means unlimited, -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
   * @return quotaSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getQuotaSize() {
    return quotaSize;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaSize(Long quotaSize) {
    this.quotaSize = quotaSize;
  }

  public VirtualFolder quotaFiles(Integer quotaFiles) {
    
    this.quotaFiles = quotaFiles;
    return this;
  }

  /**
   * Quota as number of files. 0 means unlimited, , -1 means included in user quota. Please note that quota is updated if files are added/removed via SFTPGo otherwise a quota scan or a manual quota update is needed
   * @return quotaFiles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuotaFiles() {
    return quotaFiles;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuotaFiles(Integer quotaFiles) {
    this.quotaFiles = quotaFiles;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualFolder virtualFolder = (VirtualFolder) o;
    return Objects.equals(this.id, virtualFolder.id) &&
        Objects.equals(this.name, virtualFolder.name) &&
        Objects.equals(this.mappedPath, virtualFolder.mappedPath) &&
        Objects.equals(this.description, virtualFolder.description) &&
        Objects.equals(this.usedQuotaSize, virtualFolder.usedQuotaSize) &&
        Objects.equals(this.usedQuotaFiles, virtualFolder.usedQuotaFiles) &&
        Objects.equals(this.lastQuotaUpdate, virtualFolder.lastQuotaUpdate) &&
        Objects.equals(this.users, virtualFolder.users) &&
        Objects.equals(this.filesystem, virtualFolder.filesystem) &&
        Objects.equals(this.virtualPath, virtualFolder.virtualPath) &&
        Objects.equals(this.quotaSize, virtualFolder.quotaSize) &&
        Objects.equals(this.quotaFiles, virtualFolder.quotaFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, mappedPath, description, usedQuotaSize, usedQuotaFiles, lastQuotaUpdate, users, filesystem, virtualPath, quotaSize, quotaFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualFolder {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mappedPath: ").append(toIndentedString(mappedPath)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    usedQuotaSize: ").append(toIndentedString(usedQuotaSize)).append("\n");
    sb.append("    usedQuotaFiles: ").append(toIndentedString(usedQuotaFiles)).append("\n");
    sb.append("    lastQuotaUpdate: ").append(toIndentedString(lastQuotaUpdate)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    filesystem: ").append(toIndentedString(filesystem)).append("\n");
    sb.append("    virtualPath: ").append(toIndentedString(virtualPath)).append("\n");
    sb.append("    quotaSize: ").append(toIndentedString(quotaSize)).append("\n");
    sb.append("    quotaFiles: ").append(toIndentedString(quotaFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

