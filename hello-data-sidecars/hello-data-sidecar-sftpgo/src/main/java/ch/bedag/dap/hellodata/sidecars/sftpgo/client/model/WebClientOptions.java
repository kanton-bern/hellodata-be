/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Options:   * &#x60;publickey-change-disabled&#x60; - changing SSH public keys is not allowed   * &#x60;tls-cert-change-disabled&#x60; - changing TLS certificates is not allowed   * &#x60;write-disabled&#x60; - upload, rename, delete are not allowed even if the user has permissions for these actions   * &#x60;mfa-disabled&#x60; - enabling multi-factor authentication is not allowed. This option cannot be set if the user has MFA already enabled   * &#x60;password-change-disabled&#x60; - changing password is not allowed   * &#x60;api-key-auth-change-disabled&#x60; - enabling/disabling API key authentication is not allowed   * &#x60;info-change-disabled&#x60; - changing info such as email and description is not allowed   * &#x60;shares-disabled&#x60; - sharing files and directories with external users is not allowed   * &#x60;password-reset-disabled&#x60; - resetting the password is not allowed   * &#x60;shares-without-password-disabled&#x60; - creating shares without password protection is not allowed 
 */
public enum WebClientOptions {
  
  PUBLICKEY_CHANGE_DISABLED("publickey-change-disabled"),
  
  TLS_CERT_CHANGE_DISABLED("tls-cert-change-disabled"),
  
  WRITE_DISABLED("write-disabled"),
  
  MFA_DISABLED("mfa-disabled"),
  
  PASSWORD_CHANGE_DISABLED("password-change-disabled"),
  
  API_KEY_AUTH_CHANGE_DISABLED("api-key-auth-change-disabled"),
  
  INFO_CHANGE_DISABLED("info-change-disabled"),
  
  SHARES_DISABLED("shares-disabled"),
  
  PASSWORD_RESET_DISABLED("password-reset-disabled"),
  
  SHARES_WITHOUT_PASSWORD_DISABLED("shares-without-password-disabled");

  private String value;

  WebClientOptions(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static WebClientOptions fromValue(String value) {
    for (WebClientOptions b : WebClientOptions.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

