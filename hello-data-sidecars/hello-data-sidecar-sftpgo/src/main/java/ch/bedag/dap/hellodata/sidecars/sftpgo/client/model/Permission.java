/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * Permissions:   * &#x60;*&#x60; - all permissions are granted   * &#x60;list&#x60; - list items is allowed   * &#x60;download&#x60; - download files is allowed   * &#x60;upload&#x60; - upload files is allowed   * &#x60;overwrite&#x60; - overwrite an existing file, while uploading, is allowed. upload permission is required to allow file overwrite   * &#x60;delete&#x60; - delete files or directories is allowed   * &#x60;delete_files&#x60; - delete files is allowed   * &#x60;delete_dirs&#x60; - delete directories is allowed   * &#x60;rename&#x60; - rename files or directories is allowed   * &#x60;rename_files&#x60; - rename files is allowed   * &#x60;rename_dirs&#x60; - rename directories is allowed   * &#x60;create_dirs&#x60; - create directories is allowed   * &#x60;create_symlinks&#x60; - create links is allowed   * &#x60;chmod&#x60; changing file or directory permissions is allowed   * &#x60;chown&#x60; changing file or directory owner and group is allowed   * &#x60;chtimes&#x60; changing file or directory access and modification time is allowed   * &#x60;copy&#x60;, copying files or directories is allowed 
 */
public enum Permission {
  
  STAR("*"),
  
  LIST("list"),
  
  DOWNLOAD("download"),
  
  UPLOAD("upload"),
  
  OVERWRITE("overwrite"),
  
  DELETE("delete"),
  
  DELETE_FILES("delete_files"),
  
  DELETE_DIRS("delete_dirs"),
  
  RENAME("rename"),
  
  RENAME_FILES("rename_files"),
  
  RENAME_DIRS("rename_dirs"),
  
  CREATE_DIRS("create_dirs"),
  
  CREATE_SYMLINKS("create_symlinks"),
  
  CHMOD("chmod"),
  
  CHOWN("chown"),
  
  CHTIMES("chtimes"),
  
  COPY("copy");

  private String value;

  Permission(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static Permission fromValue(String value) {
    for (Permission b : Permission.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

