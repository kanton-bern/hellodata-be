/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.ConditionOptions;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Schedule;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EventConditions
 */
@JsonPropertyOrder({
  EventConditions.JSON_PROPERTY_FS_EVENTS,
  EventConditions.JSON_PROPERTY_PROVIDER_EVENTS,
  EventConditions.JSON_PROPERTY_SCHEDULES,
  EventConditions.JSON_PROPERTY_IDP_LOGIN_EVENT,
  EventConditions.JSON_PROPERTY_OPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class EventConditions {
  /**
   * Gets or Sets fsEvents
   */
  public enum FsEventsEnum {
    UPLOAD("upload"),
    
    DOWNLOAD("download"),
    
    DELETE("delete"),
    
    RENAME("rename"),
    
    MKDIR("mkdir"),
    
    RMDIR("rmdir"),
    
    COPY("copy"),
    
    SSH_CMD("ssh_cmd"),
    
    PRE_UPLOAD("pre-upload"),
    
    PRE_DOWNLOAD("pre-download"),
    
    PRE_DELETE("pre-delete"),
    
    FIRST_UPLOAD("first-upload"),
    
    FIRST_DOWNLOAD("first-download");

    private String value;

    FsEventsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FsEventsEnum fromValue(String value) {
      for (FsEventsEnum b : FsEventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FS_EVENTS = "fs_events";
  private List<FsEventsEnum> fsEvents = new ArrayList<>();

  /**
   * Gets or Sets providerEvents
   */
  public enum ProviderEventsEnum {
    ADD("add"),
    
    UPDATE("update"),
    
    DELETE("delete");

    private String value;

    ProviderEventsEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProviderEventsEnum fromValue(String value) {
      for (ProviderEventsEnum b : ProviderEventsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PROVIDER_EVENTS = "provider_events";
  private List<ProviderEventsEnum> providerEvents = new ArrayList<>();

  public static final String JSON_PROPERTY_SCHEDULES = "schedules";
  private List<Schedule> schedules = new ArrayList<>();

  /**
   * IDP login events:   - &#x60;0&#x60; any login event   - &#x60;1&#x60; user login event   - &#x60;2&#x60; admin login event 
   */
  public enum IdpLoginEventEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    IdpLoginEventEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IdpLoginEventEnum fromValue(Integer value) {
      for (IdpLoginEventEnum b : IdpLoginEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IDP_LOGIN_EVENT = "idp_login_event";
  private IdpLoginEventEnum idpLoginEvent;

  public static final String JSON_PROPERTY_OPTIONS = "options";
  private ConditionOptions options;

  public EventConditions() {
  }

  public EventConditions fsEvents(List<FsEventsEnum> fsEvents) {
    
    this.fsEvents = fsEvents;
    return this;
  }

  public EventConditions addFsEventsItem(FsEventsEnum fsEventsItem) {
    if (this.fsEvents == null) {
      this.fsEvents = new ArrayList<>();
    }
    this.fsEvents.add(fsEventsItem);
    return this;
  }

  /**
   * Get fsEvents
   * @return fsEvents
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FS_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FsEventsEnum> getFsEvents() {
    return fsEvents;
  }


  @JsonProperty(JSON_PROPERTY_FS_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFsEvents(List<FsEventsEnum> fsEvents) {
    this.fsEvents = fsEvents;
  }

  public EventConditions providerEvents(List<ProviderEventsEnum> providerEvents) {
    
    this.providerEvents = providerEvents;
    return this;
  }

  public EventConditions addProviderEventsItem(ProviderEventsEnum providerEventsItem) {
    if (this.providerEvents == null) {
      this.providerEvents = new ArrayList<>();
    }
    this.providerEvents.add(providerEventsItem);
    return this;
  }

  /**
   * Get providerEvents
   * @return providerEvents
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROVIDER_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ProviderEventsEnum> getProviderEvents() {
    return providerEvents;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProviderEvents(List<ProviderEventsEnum> providerEvents) {
    this.providerEvents = providerEvents;
  }

  public EventConditions schedules(List<Schedule> schedules) {
    
    this.schedules = schedules;
    return this;
  }

  public EventConditions addSchedulesItem(Schedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * Get schedules
   * @return schedules
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEDULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Schedule> getSchedules() {
    return schedules;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchedules(List<Schedule> schedules) {
    this.schedules = schedules;
  }

  public EventConditions idpLoginEvent(IdpLoginEventEnum idpLoginEvent) {
    
    this.idpLoginEvent = idpLoginEvent;
    return this;
  }

  /**
   * IDP login events:   - &#x60;0&#x60; any login event   - &#x60;1&#x60; user login event   - &#x60;2&#x60; admin login event 
   * @return idpLoginEvent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IDP_LOGIN_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IdpLoginEventEnum getIdpLoginEvent() {
    return idpLoginEvent;
  }


  @JsonProperty(JSON_PROPERTY_IDP_LOGIN_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdpLoginEvent(IdpLoginEventEnum idpLoginEvent) {
    this.idpLoginEvent = idpLoginEvent;
  }

  public EventConditions options(ConditionOptions options) {
    
    this.options = options;
    return this;
  }

  /**
   * Get options
   * @return options
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConditionOptions getOptions() {
    return options;
  }


  @JsonProperty(JSON_PROPERTY_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptions(ConditionOptions options) {
    this.options = options;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventConditions eventConditions = (EventConditions) o;
    return Objects.equals(this.fsEvents, eventConditions.fsEvents) &&
        Objects.equals(this.providerEvents, eventConditions.providerEvents) &&
        Objects.equals(this.schedules, eventConditions.schedules) &&
        Objects.equals(this.idpLoginEvent, eventConditions.idpLoginEvent) &&
        Objects.equals(this.options, eventConditions.options);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fsEvents, providerEvents, schedules, idpLoginEvent, options);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventConditions {\n");
    sb.append("    fsEvents: ").append(toIndentedString(fsEvents)).append("\n");
    sb.append("    providerEvents: ").append(toIndentedString(providerEvents)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    idpLoginEvent: ").append(toIndentedString(idpLoginEvent)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

