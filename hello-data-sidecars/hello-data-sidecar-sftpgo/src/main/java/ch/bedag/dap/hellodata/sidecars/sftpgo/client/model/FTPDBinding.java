/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.PassiveIPOverride;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.TLSVersions;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FTPDBinding
 */
@JsonPropertyOrder({
  FTPDBinding.JSON_PROPERTY_ADDRESS,
  FTPDBinding.JSON_PROPERTY_PORT,
  FTPDBinding.JSON_PROPERTY_APPLY_PROXY_CONFIG,
  FTPDBinding.JSON_PROPERTY_TLS_MODE,
  FTPDBinding.JSON_PROPERTY_MIN_TLS_VERSION,
  FTPDBinding.JSON_PROPERTY_FORCE_PASSIVE_IP,
  FTPDBinding.JSON_PROPERTY_PASSIVE_IP_OVERRIDES,
  FTPDBinding.JSON_PROPERTY_CLIENT_AUTH_TYPE,
  FTPDBinding.JSON_PROPERTY_TLS_CIPHER_SUITES,
  FTPDBinding.JSON_PROPERTY_PASSIVE_CONNECTIONS_SECURITY,
  FTPDBinding.JSON_PROPERTY_ACTIVE_CONNECTIONS_SECURITY,
  FTPDBinding.JSON_PROPERTY_IGNORE_ASCII_TRANSFER_TYPE,
  FTPDBinding.JSON_PROPERTY_DEBUG
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class FTPDBinding {
  public static final String JSON_PROPERTY_ADDRESS = "address";
  private String address;

  public static final String JSON_PROPERTY_PORT = "port";
  private Integer port;

  public static final String JSON_PROPERTY_APPLY_PROXY_CONFIG = "apply_proxy_config";
  private Boolean applyProxyConfig;

  /**
   * TLS mode:   * &#x60;0&#x60; - clear or explicit TLS   * &#x60;1&#x60; - explicit TLS required   * &#x60;2&#x60; - implicit TLS 
   */
  public enum TlsModeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    TlsModeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TlsModeEnum fromValue(Integer value) {
      for (TlsModeEnum b : TlsModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TLS_MODE = "tls_mode";
  private TlsModeEnum tlsMode;

  public static final String JSON_PROPERTY_MIN_TLS_VERSION = "min_tls_version";
  private TLSVersions minTlsVersion;

  public static final String JSON_PROPERTY_FORCE_PASSIVE_IP = "force_passive_ip";
  private String forcePassiveIp;

  public static final String JSON_PROPERTY_PASSIVE_IP_OVERRIDES = "passive_ip_overrides";
  private List<PassiveIPOverride> passiveIpOverrides = new ArrayList<>();

  public static final String JSON_PROPERTY_CLIENT_AUTH_TYPE = "client_auth_type";
  private Integer clientAuthType;

  public static final String JSON_PROPERTY_TLS_CIPHER_SUITES = "tls_cipher_suites";
  private List<String> tlsCipherSuites = new ArrayList<>();

  /**
   * Active connections security:   * &#x60;0&#x60; - require matching peer IP addresses of control and data connection   * &#x60;1&#x60; - disable any checks 
   */
  public enum PassiveConnectionsSecurityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    PassiveConnectionsSecurityEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PassiveConnectionsSecurityEnum fromValue(Integer value) {
      for (PassiveConnectionsSecurityEnum b : PassiveConnectionsSecurityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PASSIVE_CONNECTIONS_SECURITY = "passive_connections_security";
  private PassiveConnectionsSecurityEnum passiveConnectionsSecurity;

  /**
   * Active connections security:   * &#x60;0&#x60; - require matching peer IP addresses of control and data connection   * &#x60;1&#x60; - disable any checks 
   */
  public enum ActiveConnectionsSecurityEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    ActiveConnectionsSecurityEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActiveConnectionsSecurityEnum fromValue(Integer value) {
      for (ActiveConnectionsSecurityEnum b : ActiveConnectionsSecurityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTIVE_CONNECTIONS_SECURITY = "active_connections_security";
  private ActiveConnectionsSecurityEnum activeConnectionsSecurity;

  /**
   * Ignore client requests to perform ASCII translations:   * &#x60;0&#x60; - ASCII translations are enabled   * &#x60;1&#x60; - ASCII translations are silently ignored 
   */
  public enum IgnoreAsciiTransferTypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    IgnoreAsciiTransferTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IgnoreAsciiTransferTypeEnum fromValue(Integer value) {
      for (IgnoreAsciiTransferTypeEnum b : IgnoreAsciiTransferTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_IGNORE_ASCII_TRANSFER_TYPE = "ignore_ascii_transfer_type";
  private IgnoreAsciiTransferTypeEnum ignoreAsciiTransferType;

  public static final String JSON_PROPERTY_DEBUG = "debug";
  private Boolean debug;

  public FTPDBinding() {
  }

  public FTPDBinding address(String address) {
    
    this.address = address;
    return this;
  }

  /**
   * TCP address the server listen on
   * @return address
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(String address) {
    this.address = address;
  }

  public FTPDBinding port(Integer port) {
    
    this.port = port;
    return this;
  }

  /**
   * the port used for serving requests
   * @return port
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPort() {
    return port;
  }


  @JsonProperty(JSON_PROPERTY_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPort(Integer port) {
    this.port = port;
  }

  public FTPDBinding applyProxyConfig(Boolean applyProxyConfig) {
    
    this.applyProxyConfig = applyProxyConfig;
    return this;
  }

  /**
   * apply the proxy configuration, if any
   * @return applyProxyConfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLY_PROXY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getApplyProxyConfig() {
    return applyProxyConfig;
  }


  @JsonProperty(JSON_PROPERTY_APPLY_PROXY_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplyProxyConfig(Boolean applyProxyConfig) {
    this.applyProxyConfig = applyProxyConfig;
  }

  public FTPDBinding tlsMode(TlsModeEnum tlsMode) {
    
    this.tlsMode = tlsMode;
    return this;
  }

  /**
   * TLS mode:   * &#x60;0&#x60; - clear or explicit TLS   * &#x60;1&#x60; - explicit TLS required   * &#x60;2&#x60; - implicit TLS 
   * @return tlsMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TLS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TlsModeEnum getTlsMode() {
    return tlsMode;
  }


  @JsonProperty(JSON_PROPERTY_TLS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsMode(TlsModeEnum tlsMode) {
    this.tlsMode = tlsMode;
  }

  public FTPDBinding minTlsVersion(TLSVersions minTlsVersion) {
    
    this.minTlsVersion = minTlsVersion;
    return this;
  }

  /**
   * Get minTlsVersion
   * @return minTlsVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_TLS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TLSVersions getMinTlsVersion() {
    return minTlsVersion;
  }


  @JsonProperty(JSON_PROPERTY_MIN_TLS_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinTlsVersion(TLSVersions minTlsVersion) {
    this.minTlsVersion = minTlsVersion;
  }

  public FTPDBinding forcePassiveIp(String forcePassiveIp) {
    
    this.forcePassiveIp = forcePassiveIp;
    return this;
  }

  /**
   * External IP address for passive connections
   * @return forcePassiveIp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORCE_PASSIVE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getForcePassiveIp() {
    return forcePassiveIp;
  }


  @JsonProperty(JSON_PROPERTY_FORCE_PASSIVE_IP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForcePassiveIp(String forcePassiveIp) {
    this.forcePassiveIp = forcePassiveIp;
  }

  public FTPDBinding passiveIpOverrides(List<PassiveIPOverride> passiveIpOverrides) {
    
    this.passiveIpOverrides = passiveIpOverrides;
    return this;
  }

  public FTPDBinding addPassiveIpOverridesItem(PassiveIPOverride passiveIpOverridesItem) {
    if (this.passiveIpOverrides == null) {
      this.passiveIpOverrides = new ArrayList<>();
    }
    this.passiveIpOverrides.add(passiveIpOverridesItem);
    return this;
  }

  /**
   * Get passiveIpOverrides
   * @return passiveIpOverrides
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSIVE_IP_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PassiveIPOverride> getPassiveIpOverrides() {
    return passiveIpOverrides;
  }


  @JsonProperty(JSON_PROPERTY_PASSIVE_IP_OVERRIDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassiveIpOverrides(List<PassiveIPOverride> passiveIpOverrides) {
    this.passiveIpOverrides = passiveIpOverrides;
  }

  public FTPDBinding clientAuthType(Integer clientAuthType) {
    
    this.clientAuthType = clientAuthType;
    return this;
  }

  /**
   * 1 means that client certificate authentication is required in addition to FTP authentication
   * @return clientAuthType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIENT_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getClientAuthType() {
    return clientAuthType;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientAuthType(Integer clientAuthType) {
    this.clientAuthType = clientAuthType;
  }

  public FTPDBinding tlsCipherSuites(List<String> tlsCipherSuites) {
    
    this.tlsCipherSuites = tlsCipherSuites;
    return this;
  }

  public FTPDBinding addTlsCipherSuitesItem(String tlsCipherSuitesItem) {
    if (this.tlsCipherSuites == null) {
      this.tlsCipherSuites = new ArrayList<>();
    }
    this.tlsCipherSuites.add(tlsCipherSuitesItem);
    return this;
  }

  /**
   * List of supported cipher suites for TLS version 1.2. If empty  a default list of secure cipher suites is used, with a preference order based on hardware performance
   * @return tlsCipherSuites
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TLS_CIPHER_SUITES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTlsCipherSuites() {
    return tlsCipherSuites;
  }


  @JsonProperty(JSON_PROPERTY_TLS_CIPHER_SUITES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTlsCipherSuites(List<String> tlsCipherSuites) {
    this.tlsCipherSuites = tlsCipherSuites;
  }

  public FTPDBinding passiveConnectionsSecurity(PassiveConnectionsSecurityEnum passiveConnectionsSecurity) {
    
    this.passiveConnectionsSecurity = passiveConnectionsSecurity;
    return this;
  }

  /**
   * Active connections security:   * &#x60;0&#x60; - require matching peer IP addresses of control and data connection   * &#x60;1&#x60; - disable any checks 
   * @return passiveConnectionsSecurity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSIVE_CONNECTIONS_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PassiveConnectionsSecurityEnum getPassiveConnectionsSecurity() {
    return passiveConnectionsSecurity;
  }


  @JsonProperty(JSON_PROPERTY_PASSIVE_CONNECTIONS_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassiveConnectionsSecurity(PassiveConnectionsSecurityEnum passiveConnectionsSecurity) {
    this.passiveConnectionsSecurity = passiveConnectionsSecurity;
  }

  public FTPDBinding activeConnectionsSecurity(ActiveConnectionsSecurityEnum activeConnectionsSecurity) {
    
    this.activeConnectionsSecurity = activeConnectionsSecurity;
    return this;
  }

  /**
   * Active connections security:   * &#x60;0&#x60; - require matching peer IP addresses of control and data connection   * &#x60;1&#x60; - disable any checks 
   * @return activeConnectionsSecurity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE_CONNECTIONS_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ActiveConnectionsSecurityEnum getActiveConnectionsSecurity() {
    return activeConnectionsSecurity;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE_CONNECTIONS_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActiveConnectionsSecurity(ActiveConnectionsSecurityEnum activeConnectionsSecurity) {
    this.activeConnectionsSecurity = activeConnectionsSecurity;
  }

  public FTPDBinding ignoreAsciiTransferType(IgnoreAsciiTransferTypeEnum ignoreAsciiTransferType) {
    
    this.ignoreAsciiTransferType = ignoreAsciiTransferType;
    return this;
  }

  /**
   * Ignore client requests to perform ASCII translations:   * &#x60;0&#x60; - ASCII translations are enabled   * &#x60;1&#x60; - ASCII translations are silently ignored 
   * @return ignoreAsciiTransferType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_ASCII_TRANSFER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IgnoreAsciiTransferTypeEnum getIgnoreAsciiTransferType() {
    return ignoreAsciiTransferType;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_ASCII_TRANSFER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreAsciiTransferType(IgnoreAsciiTransferTypeEnum ignoreAsciiTransferType) {
    this.ignoreAsciiTransferType = ignoreAsciiTransferType;
  }

  public FTPDBinding debug(Boolean debug) {
    
    this.debug = debug;
    return this;
  }

  /**
   * If enabled any FTP command will be logged
   * @return debug
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEBUG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDebug() {
    return debug;
  }


  @JsonProperty(JSON_PROPERTY_DEBUG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDebug(Boolean debug) {
    this.debug = debug;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FTPDBinding ftPDBinding = (FTPDBinding) o;
    return Objects.equals(this.address, ftPDBinding.address) &&
        Objects.equals(this.port, ftPDBinding.port) &&
        Objects.equals(this.applyProxyConfig, ftPDBinding.applyProxyConfig) &&
        Objects.equals(this.tlsMode, ftPDBinding.tlsMode) &&
        Objects.equals(this.minTlsVersion, ftPDBinding.minTlsVersion) &&
        Objects.equals(this.forcePassiveIp, ftPDBinding.forcePassiveIp) &&
        Objects.equals(this.passiveIpOverrides, ftPDBinding.passiveIpOverrides) &&
        Objects.equals(this.clientAuthType, ftPDBinding.clientAuthType) &&
        Objects.equals(this.tlsCipherSuites, ftPDBinding.tlsCipherSuites) &&
        Objects.equals(this.passiveConnectionsSecurity, ftPDBinding.passiveConnectionsSecurity) &&
        Objects.equals(this.activeConnectionsSecurity, ftPDBinding.activeConnectionsSecurity) &&
        Objects.equals(this.ignoreAsciiTransferType, ftPDBinding.ignoreAsciiTransferType) &&
        Objects.equals(this.debug, ftPDBinding.debug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, port, applyProxyConfig, tlsMode, minTlsVersion, forcePassiveIp, passiveIpOverrides, clientAuthType, tlsCipherSuites, passiveConnectionsSecurity, activeConnectionsSecurity, ignoreAsciiTransferType, debug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FTPDBinding {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    applyProxyConfig: ").append(toIndentedString(applyProxyConfig)).append("\n");
    sb.append("    tlsMode: ").append(toIndentedString(tlsMode)).append("\n");
    sb.append("    minTlsVersion: ").append(toIndentedString(minTlsVersion)).append("\n");
    sb.append("    forcePassiveIp: ").append(toIndentedString(forcePassiveIp)).append("\n");
    sb.append("    passiveIpOverrides: ").append(toIndentedString(passiveIpOverrides)).append("\n");
    sb.append("    clientAuthType: ").append(toIndentedString(clientAuthType)).append("\n");
    sb.append("    tlsCipherSuites: ").append(toIndentedString(tlsCipherSuites)).append("\n");
    sb.append("    passiveConnectionsSecurity: ").append(toIndentedString(passiveConnectionsSecurity)).append("\n");
    sb.append("    activeConnectionsSecurity: ").append(toIndentedString(activeConnectionsSecurity)).append("\n");
    sb.append("    ignoreAsciiTransferType: ").append(toIndentedString(ignoreAsciiTransferType)).append("\n");
    sb.append("    debug: ").append(toIndentedString(debug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

