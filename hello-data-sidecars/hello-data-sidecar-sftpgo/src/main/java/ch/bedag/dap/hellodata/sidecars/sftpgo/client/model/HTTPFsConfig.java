/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Secret;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * HTTPFsConfig
 */
@JsonPropertyOrder({
  HTTPFsConfig.JSON_PROPERTY_ENDPOINT,
  HTTPFsConfig.JSON_PROPERTY_USERNAME,
  HTTPFsConfig.JSON_PROPERTY_PASSWORD,
  HTTPFsConfig.JSON_PROPERTY_API_KEY,
  HTTPFsConfig.JSON_PROPERTY_SKIP_TLS_VERIFY,
  HTTPFsConfig.JSON_PROPERTY_EQUALITY_CHECK_MODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class HTTPFsConfig {
  public static final String JSON_PROPERTY_ENDPOINT = "endpoint";
  private String endpoint;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private Secret password;

  public static final String JSON_PROPERTY_API_KEY = "api_key";
  private Secret apiKey;

  public static final String JSON_PROPERTY_SKIP_TLS_VERIFY = "skip_tls_verify";
  private Boolean skipTlsVerify;

  /**
   * Defines how to check if this config points to the same server as another config. If different configs point to the same server the renaming between the fs configs is allowed:  * &#x60;0&#x60; username and endpoint must match. This is the default  * &#x60;1&#x60; only the endpoint must match 
   */
  public enum EqualityCheckModeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    EqualityCheckModeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EqualityCheckModeEnum fromValue(Integer value) {
      for (EqualityCheckModeEnum b : EqualityCheckModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EQUALITY_CHECK_MODE = "equality_check_mode";
  private EqualityCheckModeEnum equalityCheckMode;

  public HTTPFsConfig() {
  }

  public HTTPFsConfig endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

  /**
   * HTTP/S endpoint URL. SFTPGo will use this URL as base, for example for the &#x60;stat&#x60; API, SFTPGo will add &#x60;/stat/{name}&#x60;
   * @return endpoint
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndpoint() {
    return endpoint;
  }


  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public HTTPFsConfig username(String username) {
    
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }

  public HTTPFsConfig password(Secret password) {
    
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(Secret password) {
    this.password = password;
  }

  public HTTPFsConfig apiKey(Secret apiKey) {
    
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_API_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getApiKey() {
    return apiKey;
  }


  @JsonProperty(JSON_PROPERTY_API_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiKey(Secret apiKey) {
    this.apiKey = apiKey;
  }

  public HTTPFsConfig skipTlsVerify(Boolean skipTlsVerify) {
    
    this.skipTlsVerify = skipTlsVerify;
    return this;
  }

  /**
   * Get skipTlsVerify
   * @return skipTlsVerify
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_TLS_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipTlsVerify() {
    return skipTlsVerify;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_TLS_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipTlsVerify(Boolean skipTlsVerify) {
    this.skipTlsVerify = skipTlsVerify;
  }

  public HTTPFsConfig equalityCheckMode(EqualityCheckModeEnum equalityCheckMode) {
    
    this.equalityCheckMode = equalityCheckMode;
    return this;
  }

  /**
   * Defines how to check if this config points to the same server as another config. If different configs point to the same server the renaming between the fs configs is allowed:  * &#x60;0&#x60; username and endpoint must match. This is the default  * &#x60;1&#x60; only the endpoint must match 
   * @return equalityCheckMode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EQUALITY_CHECK_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EqualityCheckModeEnum getEqualityCheckMode() {
    return equalityCheckMode;
  }


  @JsonProperty(JSON_PROPERTY_EQUALITY_CHECK_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEqualityCheckMode(EqualityCheckModeEnum equalityCheckMode) {
    this.equalityCheckMode = equalityCheckMode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPFsConfig htTPFsConfig = (HTTPFsConfig) o;
    return Objects.equals(this.endpoint, htTPFsConfig.endpoint) &&
        Objects.equals(this.username, htTPFsConfig.username) &&
        Objects.equals(this.password, htTPFsConfig.password) &&
        Objects.equals(this.apiKey, htTPFsConfig.apiKey) &&
        Objects.equals(this.skipTlsVerify, htTPFsConfig.skipTlsVerify) &&
        Objects.equals(this.equalityCheckMode, htTPFsConfig.equalityCheckMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, username, password, apiKey, skipTlsVerify, equalityCheckMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPFsConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    skipTlsVerify: ").append(toIndentedString(skipTlsVerify)).append("\n");
    sb.append("    equalityCheckMode: ").append(toIndentedString(equalityCheckMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

