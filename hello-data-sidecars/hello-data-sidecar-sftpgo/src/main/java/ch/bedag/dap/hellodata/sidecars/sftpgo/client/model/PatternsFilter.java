/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PatternsFilter
 */
@JsonPropertyOrder({
  PatternsFilter.JSON_PROPERTY_PATH,
  PatternsFilter.JSON_PROPERTY_ALLOWED_PATTERNS,
  PatternsFilter.JSON_PROPERTY_DENIED_PATTERNS,
  PatternsFilter.JSON_PROPERTY_DENY_POLICY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class PatternsFilter {
  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  public static final String JSON_PROPERTY_ALLOWED_PATTERNS = "allowed_patterns";
  private List<String> allowedPatterns = new ArrayList<>();

  public static final String JSON_PROPERTY_DENIED_PATTERNS = "denied_patterns";
  private List<String> deniedPatterns = new ArrayList<>();

  /**
   * Policies for denied patterns   * &#x60;0&#x60; - default policy. Denied files/directories matching the filters are visible in directory listing but cannot be uploaded/downloaded/overwritten/renamed   * &#x60;1&#x60; - deny policy hide. This policy applies the same restrictions as the default one and denied files/directories matching the filters will also be hidden in directory listing. This mode may cause performance issues for large directories 
   */
  public enum DenyPolicyEnum {
    NUMBER_0(0),
    
    NUMBER_1(1);

    private Integer value;

    DenyPolicyEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DenyPolicyEnum fromValue(Integer value) {
      for (DenyPolicyEnum b : DenyPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DENY_POLICY = "deny_policy";
  private DenyPolicyEnum denyPolicy;

  public PatternsFilter() {
  }

  public PatternsFilter path(String path) {
    
    this.path = path;
    return this;
  }

  /**
   * virtual path as seen by users, if no other specific filter is defined, the filter applies for sub directories too. For example if filters are defined for the paths \&quot;/\&quot; and \&quot;/sub\&quot; then the filters for \&quot;/\&quot; are applied for any file outside the \&quot;/sub\&quot; directory
   * @return path
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }

  public PatternsFilter allowedPatterns(List<String> allowedPatterns) {
    
    this.allowedPatterns = allowedPatterns;
    return this;
  }

  public PatternsFilter addAllowedPatternsItem(String allowedPatternsItem) {
    if (this.allowedPatterns == null) {
      this.allowedPatterns = new ArrayList<>();
    }
    this.allowedPatterns.add(allowedPatternsItem);
    return this;
  }

  /**
   * list of, case insensitive, allowed shell like patterns. Allowed patterns are evaluated before the denied ones
   * @return allowedPatterns
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAllowedPatterns() {
    return allowedPatterns;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedPatterns(List<String> allowedPatterns) {
    this.allowedPatterns = allowedPatterns;
  }

  public PatternsFilter deniedPatterns(List<String> deniedPatterns) {
    
    this.deniedPatterns = deniedPatterns;
    return this;
  }

  public PatternsFilter addDeniedPatternsItem(String deniedPatternsItem) {
    if (this.deniedPatterns == null) {
      this.deniedPatterns = new ArrayList<>();
    }
    this.deniedPatterns.add(deniedPatternsItem);
    return this;
  }

  /**
   * list of, case insensitive, denied shell like patterns
   * @return deniedPatterns
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DENIED_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDeniedPatterns() {
    return deniedPatterns;
  }


  @JsonProperty(JSON_PROPERTY_DENIED_PATTERNS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeniedPatterns(List<String> deniedPatterns) {
    this.deniedPatterns = deniedPatterns;
  }

  public PatternsFilter denyPolicy(DenyPolicyEnum denyPolicy) {
    
    this.denyPolicy = denyPolicy;
    return this;
  }

  /**
   * Policies for denied patterns   * &#x60;0&#x60; - default policy. Denied files/directories matching the filters are visible in directory listing but cannot be uploaded/downloaded/overwritten/renamed   * &#x60;1&#x60; - deny policy hide. This policy applies the same restrictions as the default one and denied files/directories matching the filters will also be hidden in directory listing. This mode may cause performance issues for large directories 
   * @return denyPolicy
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DENY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DenyPolicyEnum getDenyPolicy() {
    return denyPolicy;
  }


  @JsonProperty(JSON_PROPERTY_DENY_POLICY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDenyPolicy(DenyPolicyEnum denyPolicy) {
    this.denyPolicy = denyPolicy;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatternsFilter patternsFilter = (PatternsFilter) o;
    return Objects.equals(this.path, patternsFilter.path) &&
        Objects.equals(this.allowedPatterns, patternsFilter.allowedPatterns) &&
        Objects.equals(this.deniedPatterns, patternsFilter.deniedPatterns) &&
        Objects.equals(this.denyPolicy, patternsFilter.denyPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, allowedPatterns, deniedPatterns, denyPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatternsFilter {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    allowedPatterns: ").append(toIndentedString(allowedPatterns)).append("\n");
    sb.append("    deniedPatterns: ").append(toIndentedString(deniedPatterns)).append("\n");
    sb.append("    denyPolicy: ").append(toIndentedString(denyPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

