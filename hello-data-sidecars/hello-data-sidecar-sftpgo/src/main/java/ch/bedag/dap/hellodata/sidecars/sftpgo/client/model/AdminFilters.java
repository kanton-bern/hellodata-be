/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.AdminPreferences;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.AdminTOTPConfig;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.RecoveryCode;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AdminFilters
 */
@JsonPropertyOrder({
  AdminFilters.JSON_PROPERTY_ALLOW_LIST,
  AdminFilters.JSON_PROPERTY_ALLOW_API_KEY_AUTH,
  AdminFilters.JSON_PROPERTY_REQUIRE_TWO_FACTOR,
  AdminFilters.JSON_PROPERTY_REQUIRE_PASSWORD_CHANGE,
  AdminFilters.JSON_PROPERTY_TOTP_CONFIG,
  AdminFilters.JSON_PROPERTY_RECOVERY_CODES,
  AdminFilters.JSON_PROPERTY_PREFERENCES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class AdminFilters {
  public static final String JSON_PROPERTY_ALLOW_LIST = "allow_list";
  private List<String> allowList = new ArrayList<>();

  public static final String JSON_PROPERTY_ALLOW_API_KEY_AUTH = "allow_api_key_auth";
  private Boolean allowApiKeyAuth;

  public static final String JSON_PROPERTY_REQUIRE_TWO_FACTOR = "require_two_factor";
  private Boolean requireTwoFactor;

  public static final String JSON_PROPERTY_REQUIRE_PASSWORD_CHANGE = "require_password_change";
  private Boolean requirePasswordChange;

  public static final String JSON_PROPERTY_TOTP_CONFIG = "totp_config";
  private AdminTOTPConfig totpConfig;

  public static final String JSON_PROPERTY_RECOVERY_CODES = "recovery_codes";
  private List<RecoveryCode> recoveryCodes = new ArrayList<>();

  public static final String JSON_PROPERTY_PREFERENCES = "preferences";
  private AdminPreferences preferences;

  public AdminFilters() {
  }

  public AdminFilters allowList(List<String> allowList) {
    
    this.allowList = allowList;
    return this;
  }

  public AdminFilters addAllowListItem(String allowListItem) {
    if (this.allowList == null) {
      this.allowList = new ArrayList<>();
    }
    this.allowList.add(allowListItem);
    return this;
  }

  /**
   * only clients connecting from these IP/Mask are allowed. IP/Mask must be in CIDR notation as defined in RFC 4632 and RFC 4291, for example \&quot;192.0.2.0/24\&quot; or \&quot;2001:db8::/32\&quot;
   * @return allowList
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAllowList() {
    return allowList;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowList(List<String> allowList) {
    this.allowList = allowList;
  }

  public AdminFilters allowApiKeyAuth(Boolean allowApiKeyAuth) {
    
    this.allowApiKeyAuth = allowApiKeyAuth;
    return this;
  }

  /**
   * API key auth allows to impersonate this administrator with an API key
   * @return allowApiKeyAuth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_API_KEY_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowApiKeyAuth() {
    return allowApiKeyAuth;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_API_KEY_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowApiKeyAuth(Boolean allowApiKeyAuth) {
    this.allowApiKeyAuth = allowApiKeyAuth;
  }

  public AdminFilters requireTwoFactor(Boolean requireTwoFactor) {
    
    this.requireTwoFactor = requireTwoFactor;
    return this;
  }

  /**
   * Get requireTwoFactor
   * @return requireTwoFactor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_TWO_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequireTwoFactor() {
    return requireTwoFactor;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_TWO_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequireTwoFactor(Boolean requireTwoFactor) {
    this.requireTwoFactor = requireTwoFactor;
  }

  public AdminFilters requirePasswordChange(Boolean requirePasswordChange) {
    
    this.requirePasswordChange = requirePasswordChange;
    return this;
  }

  /**
   * Get requirePasswordChange
   * @return requirePasswordChange
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUIRE_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRequirePasswordChange() {
    return requirePasswordChange;
  }


  @JsonProperty(JSON_PROPERTY_REQUIRE_PASSWORD_CHANGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequirePasswordChange(Boolean requirePasswordChange) {
    this.requirePasswordChange = requirePasswordChange;
  }

  public AdminFilters totpConfig(AdminTOTPConfig totpConfig) {
    
    this.totpConfig = totpConfig;
    return this;
  }

  /**
   * Get totpConfig
   * @return totpConfig
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTP_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AdminTOTPConfig getTotpConfig() {
    return totpConfig;
  }


  @JsonProperty(JSON_PROPERTY_TOTP_CONFIG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotpConfig(AdminTOTPConfig totpConfig) {
    this.totpConfig = totpConfig;
  }

  public AdminFilters recoveryCodes(List<RecoveryCode> recoveryCodes) {
    
    this.recoveryCodes = recoveryCodes;
    return this;
  }

  public AdminFilters addRecoveryCodesItem(RecoveryCode recoveryCodesItem) {
    if (this.recoveryCodes == null) {
      this.recoveryCodes = new ArrayList<>();
    }
    this.recoveryCodes.add(recoveryCodesItem);
    return this;
  }

  /**
   * Get recoveryCodes
   * @return recoveryCodes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECOVERY_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<RecoveryCode> getRecoveryCodes() {
    return recoveryCodes;
  }


  @JsonProperty(JSON_PROPERTY_RECOVERY_CODES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecoveryCodes(List<RecoveryCode> recoveryCodes) {
    this.recoveryCodes = recoveryCodes;
  }

  public AdminFilters preferences(AdminPreferences preferences) {
    
    this.preferences = preferences;
    return this;
  }

  /**
   * Get preferences
   * @return preferences
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AdminPreferences getPreferences() {
    return preferences;
  }


  @JsonProperty(JSON_PROPERTY_PREFERENCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreferences(AdminPreferences preferences) {
    this.preferences = preferences;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminFilters adminFilters = (AdminFilters) o;
    return Objects.equals(this.allowList, adminFilters.allowList) &&
        Objects.equals(this.allowApiKeyAuth, adminFilters.allowApiKeyAuth) &&
        Objects.equals(this.requireTwoFactor, adminFilters.requireTwoFactor) &&
        Objects.equals(this.requirePasswordChange, adminFilters.requirePasswordChange) &&
        Objects.equals(this.totpConfig, adminFilters.totpConfig) &&
        Objects.equals(this.recoveryCodes, adminFilters.recoveryCodes) &&
        Objects.equals(this.preferences, adminFilters.preferences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowList, allowApiKeyAuth, requireTwoFactor, requirePasswordChange, totpConfig, recoveryCodes, preferences);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminFilters {\n");
    sb.append("    allowList: ").append(toIndentedString(allowList)).append("\n");
    sb.append("    allowApiKeyAuth: ").append(toIndentedString(allowApiKeyAuth)).append("\n");
    sb.append("    requireTwoFactor: ").append(toIndentedString(requireTwoFactor)).append("\n");
    sb.append("    requirePasswordChange: ").append(toIndentedString(requirePasswordChange)).append("\n");
    sb.append("    totpConfig: ").append(toIndentedString(totpConfig)).append("\n");
    sb.append("    recoveryCodes: ").append(toIndentedString(recoveryCodes)).append("\n");
    sb.append("    preferences: ").append(toIndentedString(preferences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

