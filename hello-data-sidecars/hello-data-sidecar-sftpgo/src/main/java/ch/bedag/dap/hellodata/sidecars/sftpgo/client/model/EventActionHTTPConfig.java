/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.HTTPPart;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.KeyValue;
import ch.bedag.dap.hellodata.sidecars.sftpgo.client.model.Secret;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EventActionHTTPConfig
 */
@JsonPropertyOrder({
  EventActionHTTPConfig.JSON_PROPERTY_ENDPOINT,
  EventActionHTTPConfig.JSON_PROPERTY_USERNAME,
  EventActionHTTPConfig.JSON_PROPERTY_PASSWORD,
  EventActionHTTPConfig.JSON_PROPERTY_HEADERS,
  EventActionHTTPConfig.JSON_PROPERTY_TIMEOUT,
  EventActionHTTPConfig.JSON_PROPERTY_SKIP_TLS_VERIFY,
  EventActionHTTPConfig.JSON_PROPERTY_METHOD,
  EventActionHTTPConfig.JSON_PROPERTY_QUERY_PARAMETERS,
  EventActionHTTPConfig.JSON_PROPERTY_BODY,
  EventActionHTTPConfig.JSON_PROPERTY_PARTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class EventActionHTTPConfig {
  public static final String JSON_PROPERTY_ENDPOINT = "endpoint";
  private String endpoint;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private Secret password;

  public static final String JSON_PROPERTY_HEADERS = "headers";
  private List<KeyValue> headers = new ArrayList<>();

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  private Integer timeout;

  public static final String JSON_PROPERTY_SKIP_TLS_VERIFY = "skip_tls_verify";
  private Boolean skipTlsVerify;

  /**
   * Gets or Sets method
   */
  public enum MethodEnum {
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    DELETE("DELETE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private MethodEnum method;

  public static final String JSON_PROPERTY_QUERY_PARAMETERS = "query_parameters";
  private List<KeyValue> queryParameters = new ArrayList<>();

  public static final String JSON_PROPERTY_BODY = "body";
  private String body;

  public static final String JSON_PROPERTY_PARTS = "parts";
  private List<HTTPPart> parts = new ArrayList<>();

  public EventActionHTTPConfig() {
  }

  public EventActionHTTPConfig endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

  /**
   * HTTP endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndpoint() {
    return endpoint;
  }


  @JsonProperty(JSON_PROPERTY_ENDPOINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public EventActionHTTPConfig username(String username) {
    
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }

  public EventActionHTTPConfig password(Secret password) {
    
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Secret getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassword(Secret password) {
    this.password = password;
  }

  public EventActionHTTPConfig headers(List<KeyValue> headers) {
    
    this.headers = headers;
    return this;
  }

  public EventActionHTTPConfig addHeadersItem(KeyValue headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * headers to add
   * @return headers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<KeyValue> getHeaders() {
    return headers;
  }


  @JsonProperty(JSON_PROPERTY_HEADERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeaders(List<KeyValue> headers) {
    this.headers = headers;
  }

  public EventActionHTTPConfig timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

  /**
   * Ignored for multipart requests with files as attachments
   * minimum: 1
   * maximum: 180
   * @return timeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public EventActionHTTPConfig skipTlsVerify(Boolean skipTlsVerify) {
    
    this.skipTlsVerify = skipTlsVerify;
    return this;
  }

  /**
   * if enabled the HTTP client accepts any TLS certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks. This should be used only for testing.
   * @return skipTlsVerify
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP_TLS_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSkipTlsVerify() {
    return skipTlsVerify;
  }


  @JsonProperty(JSON_PROPERTY_SKIP_TLS_VERIFY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSkipTlsVerify(Boolean skipTlsVerify) {
    this.skipTlsVerify = skipTlsVerify;
  }

  public EventActionHTTPConfig method(MethodEnum method) {
    
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  public EventActionHTTPConfig queryParameters(List<KeyValue> queryParameters) {
    
    this.queryParameters = queryParameters;
    return this;
  }

  public EventActionHTTPConfig addQueryParametersItem(KeyValue queryParametersItem) {
    if (this.queryParameters == null) {
      this.queryParameters = new ArrayList<>();
    }
    this.queryParameters.add(queryParametersItem);
    return this;
  }

  /**
   * Get queryParameters
   * @return queryParameters
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<KeyValue> getQueryParameters() {
    return queryParameters;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryParameters(List<KeyValue> queryParameters) {
    this.queryParameters = queryParameters;
  }

  public EventActionHTTPConfig body(String body) {
    
    this.body = body;
    return this;
  }

  /**
   * HTTP POST/PUT body
   * @return body
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBody() {
    return body;
  }


  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBody(String body) {
    this.body = body;
  }

  public EventActionHTTPConfig parts(List<HTTPPart> parts) {
    
    this.parts = parts;
    return this;
  }

  public EventActionHTTPConfig addPartsItem(HTTPPart partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

  /**
   * Multipart requests allow to combine one or more sets of data into a single body. For each part, you can set a file path or a body as text. Placeholders are supported in file path, body, header values.
   * @return parts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<HTTPPart> getParts() {
    return parts;
  }


  @JsonProperty(JSON_PROPERTY_PARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParts(List<HTTPPart> parts) {
    this.parts = parts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventActionHTTPConfig eventActionHTTPConfig = (EventActionHTTPConfig) o;
    return Objects.equals(this.endpoint, eventActionHTTPConfig.endpoint) &&
        Objects.equals(this.username, eventActionHTTPConfig.username) &&
        Objects.equals(this.password, eventActionHTTPConfig.password) &&
        Objects.equals(this.headers, eventActionHTTPConfig.headers) &&
        Objects.equals(this.timeout, eventActionHTTPConfig.timeout) &&
        Objects.equals(this.skipTlsVerify, eventActionHTTPConfig.skipTlsVerify) &&
        Objects.equals(this.method, eventActionHTTPConfig.method) &&
        Objects.equals(this.queryParameters, eventActionHTTPConfig.queryParameters) &&
        Objects.equals(this.body, eventActionHTTPConfig.body) &&
        Objects.equals(this.parts, eventActionHTTPConfig.parts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, username, password, headers, timeout, skipTlsVerify, method, queryParameters, body, parts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventActionHTTPConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    skipTlsVerify: ").append(toIndentedString(skipTlsVerify)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    queryParameters: ").append(toIndentedString(queryParameters)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

