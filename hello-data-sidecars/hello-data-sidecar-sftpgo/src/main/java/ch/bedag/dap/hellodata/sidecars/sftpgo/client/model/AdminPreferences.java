/*
 * SFTPGo
 * SFTPGo allows you to securely share your files over SFTP and optionally over HTTP/S, FTP/S and WebDAV as well. Several storage backends are supported and they are configurable per-user, so you can serve a local directory for a user and an S3 bucket (or part of it) for another one. SFTPGo also supports virtual folders, a virtual folder can use any of the supported storage backends. So you can have, for example, a user with the S3 backend mapping a Google Cloud Storage bucket (or part of it) on a specified path and an encrypted local filesystem on another one. Virtual folders can be private or shared among multiple users, for shared virtual folders you can define different quota limits for each user. SFTPGo supports groups to simplify the administration of multiple accounts by letting you assign settings once to a group, instead of multiple times to each individual user. The SFTPGo WebClient allows end users to change their credentials, browse and manage their files in the browser and setup two-factor authentication which works with Authy, Google Authenticator and other compatible apps. From the WebClient each authorized user can also create HTTP/S links to externally share files and folders securely, by setting limits to the number of downloads/uploads, protecting the share with a password, limiting access by source IP address, setting an automatic expiration date. 
 *
 * The version of the OpenAPI document: 2.6.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package ch.bedag.dap.hellodata.sidecars.sftpgo.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AdminPreferences
 */
@JsonPropertyOrder({
  AdminPreferences.JSON_PROPERTY_HIDE_USER_PAGE_SECTIONS,
  AdminPreferences.JSON_PROPERTY_DEFAULT_USERS_EXPIRATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-12-10T09:15:17.190691+01:00[Europe/Warsaw]", comments = "Generator version: 7.9.0")
public class AdminPreferences {
  public static final String JSON_PROPERTY_HIDE_USER_PAGE_SECTIONS = "hide_user_page_sections";
  private Integer hideUserPageSections;

  public static final String JSON_PROPERTY_DEFAULT_USERS_EXPIRATION = "default_users_expiration";
  private Integer defaultUsersExpiration;

  public AdminPreferences() {
  }

  public AdminPreferences hideUserPageSections(Integer hideUserPageSections) {
    
    this.hideUserPageSections = hideUserPageSections;
    return this;
  }

  /**
   * Allow to hide some sections from the user page. These are not security settings and are not enforced server side in any way. They are only intended to simplify the user page in the WebAdmin UI. 1 means hide groups section, 2 means hide filesystem section, \&quot;users_base_dir\&quot; must be set in the config file otherwise this setting is ignored, 4 means hide virtual folders section, 8 means hide profile section, 16 means hide ACLs section, 32 means hide disk and bandwidth quota limits section, 64 means hide advanced settings section. The settings can be combined
   * @return hideUserPageSections
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDE_USER_PAGE_SECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHideUserPageSections() {
    return hideUserPageSections;
  }


  @JsonProperty(JSON_PROPERTY_HIDE_USER_PAGE_SECTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHideUserPageSections(Integer hideUserPageSections) {
    this.hideUserPageSections = hideUserPageSections;
  }

  public AdminPreferences defaultUsersExpiration(Integer defaultUsersExpiration) {
    
    this.defaultUsersExpiration = defaultUsersExpiration;
    return this;
  }

  /**
   * Defines the default expiration for newly created users as number of days. 0 means no expiration
   * @return defaultUsersExpiration
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_USERS_EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDefaultUsersExpiration() {
    return defaultUsersExpiration;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_USERS_EXPIRATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultUsersExpiration(Integer defaultUsersExpiration) {
    this.defaultUsersExpiration = defaultUsersExpiration;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminPreferences adminPreferences = (AdminPreferences) o;
    return Objects.equals(this.hideUserPageSections, adminPreferences.hideUserPageSections) &&
        Objects.equals(this.defaultUsersExpiration, adminPreferences.defaultUsersExpiration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hideUserPageSections, defaultUsersExpiration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminPreferences {\n");
    sb.append("    hideUserPageSections: ").append(toIndentedString(hideUserPageSections)).append("\n");
    sb.append("    defaultUsersExpiration: ").append(toIndentedString(defaultUsersExpiration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

