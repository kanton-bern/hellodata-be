<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ch.bedag.dap.hellodata</groupId>
    <artifactId>hello-data-monitoring-sba</artifactId>
    <version>main-SNAPSHOT</version>

    <distributionManagement>
        <repository>
            <id>github</id>
            <name>GitHub kanton-bern Maven Packages</name>
            <url>https://maven.pkg.github.com/kanton-bern/hellodata-be</url>
        </repository>
        <snapshotRepository>
            <id>github-snapshots</id>
            <name>GitHub kanton-bern Maven Snapshots</name>
            <url>https://maven.pkg.github.com/kanton-bern/hellodata-be</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <micrometer-registry-prometheus.version>1.11.4</micrometer-registry-prometheus.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <push-docker-image-phase>post-integration-test</push-docker-image-phase>
        <start-class>ch.bedag.dap.hellodata.monitoring.sba.SBAdminApplication</start-class>
        <spring-version>3.2.1</spring-version>
        <spring-cloud-starter-kubernetes-client-all-version>3.1.0</spring-cloud-starter-kubernetes-client-all-version>
        <spring-boot-admin-version>3.2.0</spring-boot-admin-version>
        <docker.namespace>bedag</docker.namespace>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <version>${spring-version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${spring-boot-admin-version}</version>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-server</artifactId>
            <version>${spring-boot-admin-version}</version>
        </dependency>
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-server-ui</artifactId>
            <version>${spring-boot-admin-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes-client-all</artifactId>
            <version>${spring-cloud-starter-kubernetes-client-all-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
            <version>${spring-version}</version>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
            <version>${micrometer-registry-prometheus.version}</version>
        </dependency>
    </dependencies>

    <build>
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <addResources>false</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-tag-name</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>regex-property</goal>
                                </goals>
                                <configuration>
                                    <name>docker.tag.name</name>
                                    <value>${project.version}</value>
                                    <!-- inverse match the characters allowed in docker tag names -->
                                    <regex>[^A-Za-z0-9_.-]</regex>
                                    <!-- empty replacement replaces all occurrences with an empty string -->
                                    <!-- if no match is found, the value is a valid docker tag name -->
                                    <failIfNoMatch>false</failIfNoMatch>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- use standard docker-tag latest for development-SNAPSHOT -->
                                <id>use-latest</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>regex-property</goal>
                                </goals>
                                <configuration>
                                    <name>docker.tag.name</name>
                                    <value>${project.version}</value>
                                    <regex>main-SNAPSHOT</regex>
                                    <replacement>latest</replacement>
                                    <failIfNoMatch>false</failIfNoMatch>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>0.43.4</version>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>push-docker-image</id>
                                <phase>${push-docker-image-phase}</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <autoPull>always</autoPull>
                            <verbose>true</verbose>
                            <logStdout>true</logStdout>
                            <images>
                                <image>
                                    <name>${docker.namespace}/hello-data-monitoring-sba:${docker.tag.name}</name>
                                    <build>
                                        <contextDir>${project.basedir}</contextDir>
                                    </build>
                                </image>
                            </images>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
